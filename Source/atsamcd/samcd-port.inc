/// ========== Instance parameters for PORT peripheral ========== */
const
  PORT_PINCFG_PMUXEN_Pos         = 0; //         // \brief (PORT_PINCFG) Peripheral Multiplexer Enable */
  PORT_PINCFG_PMUXEN             = (1 shl PORT_PINCFG_PMUXEN_Pos);
  PORT_PINCFG_INEN_Pos           = 1;            // \brief (PORT_PINCFG) Input Enable */
  PORT_PINCFG_INEN               = (1 shl PORT_PINCFG_INEN_Pos);
  PORT_PINCFG_PULLEN_Pos         = 2;            // \brief (PORT_PINCFG) Pull Enable */
  PORT_PINCFG_PULLEN             = (1 shl PORT_PINCFG_PULLEN_Pos);
  PORT_PINCFG_DRVSTR_Pos         = 6;            // \brief (PORT_PINCFG) Output Driver Strength Selection */
  PORT_PINCFG_DRVSTR             = (1 shl PORT_PINCFG_DRVSTR_Pos);
  PORT_PINCFG_MASK               = $47;          // \brief (PORT_PINCFG) MASK Register */

  PORT_PMUX_A_Val          = $0;  //(PORT_PMUX) Peripheral function A selected */
  PORT_PMUX_B_Val          = $1;  //(PORT_PMUX) Peripheral function B selected */
  PORT_PMUX_C_Val          = $2;  //(PORT_PMUX) Peripheral function C selected */
  PORT_PMUX_D_Val          = $3;  //(PORT_PMUX) Peripheral function D selected */
  PORT_PMUX_E_Val          = $4;  //(PORT_PMUX) Peripheral function E selected */
  PORT_PMUX_F_Val          = $5;  //(PORT_PMUX) Peripheral function F selected */
  PORT_PMUX_G_Val          = $6;  //(PORT_PMUX) Peripheral function G selected */
  PORT_PMUX_H_Val          = $7;  //(PORT_PMUX) Peripheral function H selected */

  PORT_PMUX_PMUXE_Pos      = 0;   // \brief (PORT_PMUX) Peripheral Multiplexing Even */
  PORT_PMUX_PMUXE_Msk      = ($0f shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_A        = (PORT_PMUX_A_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_B        = (PORT_PMUX_B_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_C        = (PORT_PMUX_C_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_D        = (PORT_PMUX_D_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_E        = (PORT_PMUX_E_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_F        = (PORT_PMUX_F_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_G        = (PORT_PMUX_G_Val         shl PORT_PMUX_PMUXE_Pos);
  PORT_PMUX_PMUXE_H        = (PORT_PMUX_H_Val         shl PORT_PMUX_PMUXE_Pos);

  PORT_PMUX_PMUXO_Pos      = 4;   // \brief (PORT_PMUX) Peripheral Multiplexing Odd */
  PORT_PMUX_PMUXO_Msk      = ($0f shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_A        = (PORT_PMUX_A_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_B        = (PORT_PMUX_B_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_C        = (PORT_PMUX_C_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_D        = (PORT_PMUX_D_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_E        = (PORT_PMUX_E_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_F        = (PORT_PMUX_F_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_G        = (PORT_PMUX_G_Val         shl PORT_PMUX_PMUXO_Pos);
  PORT_PMUX_PMUXO_H        = (PORT_PMUX_H_Val         shl PORT_PMUX_PMUXO_Pos);

  PORT_WRCONFIG_INEN_Pos         = 17;           // \brief (PORT_WRCONFIG) Input Enable */
  PORT_WRCONFIG_INEN             = ($01 shl PORT_WRCONFIG_INEN_Pos);

  PORT_WRCONFIG_WRPINCFG_Pos     = 30;           // \brief (PORT_WRCONFIG) Write PINCFG */
  PORT_WRCONFIG_WRPINCFG         = ($01 shl PORT_WRCONFIG_WRPINCFG_Pos);

  PORT_WRCONFIG_HWSEL_Pos        = 31;           // \brief (PORT_WRCONFIG) Half-Word Select */
  PORT_WRCONFIG_HWSEL            = ($01 shl PORT_WRCONFIG_HWSEL_Pos);

  {$if defined(samd21)}
  PIN_PA00   = 0;  // Pin Number for PA00 */
  PORT_PA00  =   (1 shl 0); // PORT Mask  for PA00 */
  PIN_PA01   = 1;  // Pin Number for PA01 */
  PORT_PA01  =   (1 shl 1); // PORT Mask  for PA01 */
  PIN_PA02   = 2;  // Pin Number for PA02 */
  PORT_PA02  =   (1 shl 2); // PORT Mask  for PA02 */
  PIN_PA03  = 3;  // Pin Number for PA03 */
  PORT_PA03  =   (1 shl 3); // PORT Mask  for PA03 */
  PIN_PA04  = 4;  // Pin Number for PA04 */
  PORT_PA04  =   (1 shl 4); // PORT Mask  for PA04 */
  PIN_PA05  = 5;  // Pin Number for PA05 */
  PORT_PA05  =   (1 shl 5); // PORT Mask  for PA05 */
  PIN_PA06  = 6;  // Pin Number for PA06 */
  PORT_PA06  =   (1 shl 6); // PORT Mask  for PA06 */
  PIN_PA07  = 7;  // Pin Number for PA07 */
  PORT_PA07  =   (1 shl 7); // PORT Mask  for PA07 */
  PIN_PA08  = 8;  // Pin Number for PA08 */
  PORT_PA08  =   (1 shl 8); // PORT Mask  for PA08 */
  PIN_PA09  = 9;  // Pin Number for PA09 */
  PORT_PA09  =   (1 shl 9); // PORT Mask  for PA09 */
  PIN_PA10  =    10;  // Pin Number for PA10 */
  PORT_PA10  =   (1 shl 10); // PORT Mask  for PA10 */
  PIN_PA11  =    11;  // Pin Number for PA11 */
  PORT_PA11  =   (1 shl 11); // PORT Mask  for PA11 */
  PIN_PA12  =    12;  // Pin Number for PA12 */
  PORT_PA12  =   (1 shl 12); // PORT Mask  for PA12 */
  PIN_PA13  =    13;  // Pin Number for PA13 */
  PORT_PA13  =   (1 shl 13); // PORT Mask  for PA13 */
  PIN_PA14  =    14;  // Pin Number for PA14 */
  PORT_PA14  =   (1 shl 14); // PORT Mask  for PA14 */
  PIN_PA15  =    15;  // Pin Number for PA15 */
  PORT_PA15  =   (1 shl 15); // PORT Mask  for PA15 */
  PIN_PA16  =    16;  // Pin Number for PA16 */
  PORT_PA16  =   (1 shl 16); // PORT Mask  for PA16 */
  PIN_PA17  =    17;  // Pin Number for PA17 */
  PORT_PA17  =   (1 shl 17); // PORT Mask  for PA17 */
  PIN_PA18  =    18;  // Pin Number for PA18 */
  PORT_PA18  =   (1 shl 18); // PORT Mask  for PA18 */
  PIN_PA19  =    19;  // Pin Number for PA19 */
  PORT_PA19  =   (1 shl 19); // PORT Mask  for PA19 */
  PIN_PA20  =    20;  // Pin Number for PA20 */
  PORT_PA20  =   (1 shl 20); // PORT Mask  for PA20 */
  PIN_PA21  =    21;  // Pin Number for PA21 */
  PORT_PA21  =   (1 shl 21); // PORT Mask  for PA21 */
  PIN_PA22  =    22;  // Pin Number for PA22 */
  PORT_PA22  =   (1 shl 22); // PORT Mask  for PA22 */
  PIN_PA23  =    23;  // Pin Number for PA23 */
  PORT_PA23  =   (1 shl 23); // PORT Mask  for PA23 */
  PIN_PA24  =    24;  // Pin Number for PA24 */
  PORT_PA24  =   (1 shl 24); // PORT Mask  for PA24 */
  PIN_PA25  =    25;  // Pin Number for PA25 */
  PORT_PA25  =   (1 shl 25); // PORT Mask  for PA25 */
  PIN_PA27  =    27;  // Pin Number for PA27 */
  PORT_PA27  =   (1 shl 27); // PORT Mask  for PA27 */
  PIN_PA28  =    28;  // Pin Number for PA28 */
  PORT_PA28  =   (1 shl 28); // PORT Mask  for PA28 */
  PIN_PA30  =    30;  // Pin Number for PA30 */
  PORT_PA30  =   (1 shl 30); // PORT Mask  for PA30 */
  PIN_PA31  =    31;  // Pin Number for PA31 */
  PORT_PA31  =   (1 shl 31); // PORT Mask  for PA31 */
  PIN_PB00  =    32;  // Pin Number for PB00 */
  PORT_PB00  =   (1 shl 0); // PORT Mask  for PB00 */
  PIN_PB01  =    33;  // Pin Number for PB01 */
  PORT_PB01  =   (1 shl 1); // PORT Mask  for PB01 */
  PIN_PB02  =    34;  // Pin Number for PB02 */
  PORT_PB02  =   (1 shl 2); // PORT Mask  for PB02 */
  PIN_PB03  =    35;  // Pin Number for PB03 */
  PORT_PB03  =   (1 shl 3); // PORT Mask  for PB03 */
  PIN_PB04  =    36;  // Pin Number for PB04 */
  PORT_PB04  =   (1 shl 4); // PORT Mask  for PB04 */
  PIN_PB05  =    37;  // Pin Number for PB05 */
  PORT_PB05  =   (1 shl 5); // PORT Mask  for PB05 */
  PIN_PB06  =    38;  // Pin Number for PB06 */
  PORT_PB06  =   (1 shl 6); // PORT Mask  for PB06 */
  PIN_PB07  =    39;  // Pin Number for PB07 */
  PORT_PB07  =   (1 shl 7); // PORT Mask  for PB07 */
  PIN_PB08  =    40;  // Pin Number for PB08 */
  PORT_PB08  =   (1 shl 8); // PORT Mask  for PB08 */
  PIN_PB09  =    41;  // Pin Number for PB09 */
  PORT_PB09  =   (1 shl 9); // PORT Mask  for PB09 */
  PIN_PB10  =    42;  // Pin Number for PB10 */
  PORT_PB10  =   (1 shl 10); // PORT Mask  for PB10 */
  PIN_PB11  =    43;  // Pin Number for PB11 */
  PORT_PB11  =   (1 shl 11); // PORT Mask  for PB11 */
  PIN_PB12  =    44;  // Pin Number for PB12 */
  PORT_PB12  =   (1 shl 12); // PORT Mask  for PB12 */
  PIN_PB13  =    45;  // Pin Number for PB13 */
  PORT_PB13  =   (1 shl 13); // PORT Mask  for PB13 */
  PIN_PB14  =    46;  // Pin Number for PB14 */
  PORT_PB14  =   (1 shl 14); // PORT Mask  for PB14 */
  PIN_PB15  =    47;  // Pin Number for PB15 */
  PORT_PB15  =   (1 shl 15); // PORT Mask  for PB15 */
  PIN_PB16  =    48;  // Pin Number for PB16 */
  PORT_PB16  =   (1 shl 16); // PORT Mask  for PB16 */
  PIN_PB17  =    49;  // Pin Number for PB17 */
  PORT_PB17  =   (1 shl 17); // PORT Mask  for PB17 */
  PIN_PB22  =    54;  // Pin Number for PB22 */
  PORT_PB22  =   (1 shl 22); // PORT Mask  for PB22 */
  PIN_PB23  =    55;  // Pin Number for PB23 */
  PORT_PB23  =   (1 shl 23); // PORT Mask  for PB23 */
  PIN_PB30  =    62;  // Pin Number for PB30 */
  PORT_PB30  =   (1 shl 30); // PORT Mask  for PB30 */
  PIN_PB31  =    63;  // Pin Number for PB31 */
  PORT_PB31  =   (1 shl 31); // PORT Mask  for PB31 */
  // ========== PORT definition for GCLK peripheral ========== */
  PIN_PB14H_GCLK_IO0  =  46;  // GCLK signal: IO0 on PB14 mux H */
  MUX_PB14H_GCLK_IO0  =   7;
  PINMUX_PB14H_GCLK_IO0=  ((PIN_PB14H_GCLK_IO0 shl 16) OR MUX_PB14H_GCLK_IO0);
  PORT_PB14H_GCLK_IO0=    (1 shl 14);
  PIN_PB22H_GCLK_IO0  =  54;  // GCLK signal: IO0 on PB22 mux H */
  MUX_PB22H_GCLK_IO0  =   7;
  PINMUX_PB22H_GCLK_IO0=  ((PIN_PB22H_GCLK_IO0 shl 16) OR MUX_PB22H_GCLK_IO0);
  PORT_PB22H_GCLK_IO0=    (1 shl 22);
  PIN_PA14H_GCLK_IO0  =  14;  // GCLK signal: IO0 on PA14 mux H */
  MUX_PA14H_GCLK_IO0  =   7;
  PINMUX_PA14H_GCLK_IO0=  ((PIN_PA14H_GCLK_IO0 shl 16) OR MUX_PA14H_GCLK_IO0);
  PORT_PA14H_GCLK_IO0=    (1 shl 14);
  PIN_PA27H_GCLK_IO0  =  27;  // GCLK signal: IO0 on PA27 mux H */
  MUX_PA27H_GCLK_IO0  =   7;
  PINMUX_PA27H_GCLK_IO0=  ((PIN_PA27H_GCLK_IO0 shl 16) OR MUX_PA27H_GCLK_IO0);
  PORT_PA27H_GCLK_IO0=    (1 shl 27);
  PIN_PA28H_GCLK_IO0  =  28;  // GCLK signal: IO0 on PA28 mux H */
  MUX_PA28H_GCLK_IO0  =   7;
  PINMUX_PA28H_GCLK_IO0=  ((PIN_PA28H_GCLK_IO0 shl 16) OR MUX_PA28H_GCLK_IO0);
  PORT_PA28H_GCLK_IO0=    (1 shl 28);
  PIN_PA30H_GCLK_IO0  =  30;  // GCLK signal: IO0 on PA30 mux H */
  MUX_PA30H_GCLK_IO0  =   7;
  PINMUX_PA30H_GCLK_IO0=  ((PIN_PA30H_GCLK_IO0 shl 16) OR MUX_PA30H_GCLK_IO0);
  PORT_PA30H_GCLK_IO0=    (1 shl 30);
  PIN_PB15H_GCLK_IO1  =  47;  // GCLK signal: IO1 on PB15 mux H */
  MUX_PB15H_GCLK_IO1  =   7;
  PINMUX_PB15H_GCLK_IO1=  ((PIN_PB15H_GCLK_IO1 shl 16) OR MUX_PB15H_GCLK_IO1);
  PORT_PB15H_GCLK_IO1=    (1 shl 15);
  PIN_PB23H_GCLK_IO1  =  55;  // GCLK signal: IO1 on PB23 mux H */
  MUX_PB23H_GCLK_IO1  =   7;
  PINMUX_PB23H_GCLK_IO1=  ((PIN_PB23H_GCLK_IO1 shl 16) OR MUX_PB23H_GCLK_IO1);
  PORT_PB23H_GCLK_IO1=    (1 shl 23);
  PIN_PA15H_GCLK_IO1  =  15;  // GCLK signal: IO1 on PA15 mux H */
  MUX_PA15H_GCLK_IO1  =   7;
  PINMUX_PA15H_GCLK_IO1=  ((PIN_PA15H_GCLK_IO1 shl 16) OR MUX_PA15H_GCLK_IO1);
  PORT_PA15H_GCLK_IO1=    (1 shl 15);
  PIN_PB16H_GCLK_IO2  =  48;  // GCLK signal: IO2 on PB16 mux H */
  MUX_PB16H_GCLK_IO2  =   7;
  PINMUX_PB16H_GCLK_IO2=  ((PIN_PB16H_GCLK_IO2 shl 16) OR MUX_PB16H_GCLK_IO2);
  PORT_PB16H_GCLK_IO2=    (1 shl 16);
  PIN_PA16H_GCLK_IO2  =  16;  // GCLK signal: IO2 on PA16 mux H */
  MUX_PA16H_GCLK_IO2  =   7;
  PINMUX_PA16H_GCLK_IO2=  ((PIN_PA16H_GCLK_IO2 shl 16) OR MUX_PA16H_GCLK_IO2);
  PORT_PA16H_GCLK_IO2=    (1 shl 16);
  PIN_PA17H_GCLK_IO3  =  17;  // GCLK signal: IO3 on PA17 mux H */
  MUX_PA17H_GCLK_IO3  =   7;
  PINMUX_PA17H_GCLK_IO3=  ((PIN_PA17H_GCLK_IO3 shl 16) OR MUX_PA17H_GCLK_IO3);
  PORT_PA17H_GCLK_IO3=    (1 shl 17);
  PIN_PB17H_GCLK_IO3  =  49;  // GCLK signal: IO3 on PB17 mux H */
  MUX_PB17H_GCLK_IO3  =   7;
  PINMUX_PB17H_GCLK_IO3=  ((PIN_PB17H_GCLK_IO3 shl 16) OR MUX_PB17H_GCLK_IO3);
  PORT_PB17H_GCLK_IO3=    (1 shl 17);
  PIN_PA10H_GCLK_IO4  =  10;  // GCLK signal: IO4 on PA10 mux H */
  MUX_PA10H_GCLK_IO4  =   7;
  PINMUX_PA10H_GCLK_IO4=  ((PIN_PA10H_GCLK_IO4 shl 16) OR MUX_PA10H_GCLK_IO4);
  PORT_PA10H_GCLK_IO4=    (1 shl 10);
  PIN_PA20H_GCLK_IO4  =  20;  // GCLK signal: IO4 on PA20 mux H */
  MUX_PA20H_GCLK_IO4  =   7;
  PINMUX_PA20H_GCLK_IO4=  ((PIN_PA20H_GCLK_IO4 shl 16) OR MUX_PA20H_GCLK_IO4);
  PORT_PA20H_GCLK_IO4=    (1 shl 20);
  PIN_PB10H_GCLK_IO4  =  42;  // GCLK signal: IO4 on PB10 mux H */
  MUX_PB10H_GCLK_IO4  =   7;
  PINMUX_PB10H_GCLK_IO4=  ((PIN_PB10H_GCLK_IO4 shl 16) OR MUX_PB10H_GCLK_IO4);
  PORT_PB10H_GCLK_IO4=    (1 shl 10);
  PIN_PA11H_GCLK_IO5  =  11;  // GCLK signal: IO5 on PA11 mux H */
  MUX_PA11H_GCLK_IO5  =   7;
  PINMUX_PA11H_GCLK_IO5=  ((PIN_PA11H_GCLK_IO5 shl 16) OR MUX_PA11H_GCLK_IO5);
  PORT_PA11H_GCLK_IO5=    (1 shl 11);
  PIN_PA21H_GCLK_IO5  =  21;  // GCLK signal: IO5 on PA21 mux H */
  MUX_PA21H_GCLK_IO5  =   7;
  PINMUX_PA21H_GCLK_IO5=  ((PIN_PA21H_GCLK_IO5 shl 16) OR MUX_PA21H_GCLK_IO5);
  PORT_PA21H_GCLK_IO5=    (1 shl 21);
  PIN_PB11H_GCLK_IO5  =  43;  // GCLK signal: IO5 on PB11 mux H */
  MUX_PB11H_GCLK_IO5  =   7;
  PINMUX_PB11H_GCLK_IO5=  ((PIN_PB11H_GCLK_IO5 shl 16) OR MUX_PB11H_GCLK_IO5);
  PORT_PB11H_GCLK_IO5=    (1 shl 11);
  PIN_PA22H_GCLK_IO6  =  22;  // GCLK signal: IO6 on PA22 mux H */
  MUX_PA22H_GCLK_IO6  =   7;
  PINMUX_PA22H_GCLK_IO6=  ((PIN_PA22H_GCLK_IO6 shl 16) OR MUX_PA22H_GCLK_IO6);
  PORT_PA22H_GCLK_IO6=    (1 shl 22);
  PIN_PB12H_GCLK_IO6  =  44;  // GCLK signal: IO6 on PB12 mux H */
  MUX_PB12H_GCLK_IO6  =   7;
  PINMUX_PB12H_GCLK_IO6=  ((PIN_PB12H_GCLK_IO6 shl 16) OR MUX_PB12H_GCLK_IO6);
  PORT_PB12H_GCLK_IO6=    (1 shl 12);
  PIN_PA23H_GCLK_IO7  =  23;  // GCLK signal: IO7 on PA23 mux H */
  MUX_PA23H_GCLK_IO7  =   7;
  PINMUX_PA23H_GCLK_IO7=  ((PIN_PA23H_GCLK_IO7 shl 16) OR MUX_PA23H_GCLK_IO7);
  PORT_PA23H_GCLK_IO7=    (1 shl 23);
  PIN_PB13H_GCLK_IO7  =  45;  // GCLK signal: IO7 on PB13 mux H */
  MUX_PB13H_GCLK_IO7  =   7;
  PINMUX_PB13H_GCLK_IO7=  ((PIN_PB13H_GCLK_IO7 shl 16) OR MUX_PB13H_GCLK_IO7);
  PORT_PB13H_GCLK_IO7=    (1 shl 13);
  // ========== PORT definition for EIC peripheral ========== */
  PIN_PA16A_EIC_EXTINT0 =   16;  // EIC signal: EXTINT0 on PA16 mux A */
  MUX_PA16A_EIC_EXTINT0 =    0;
  PINMUX_PA16A_EIC_EXTINT0= ((PIN_PA16A_EIC_EXTINT0 shl 16) OR MUX_PA16A_EIC_EXTINT0);
  PORT_PA16A_EIC_EXTINT0=   (1 shl 16);
  PIN_PB00A_EIC_EXTINT0 =   32;  // EIC signal: EXTINT0 on PB00 mux A */
  MUX_PB00A_EIC_EXTINT0 =    0;
  PINMUX_PB00A_EIC_EXTINT0= ((PIN_PB00A_EIC_EXTINT0 shl 16) OR MUX_PB00A_EIC_EXTINT0);
  PORT_PB00A_EIC_EXTINT0=   (1 shl 0);
  PIN_PB16A_EIC_EXTINT0 =   48;  // EIC signal: EXTINT0 on PB16 mux A */
  MUX_PB16A_EIC_EXTINT0 =    0;
  PINMUX_PB16A_EIC_EXTINT0= ((PIN_PB16A_EIC_EXTINT0 shl 16) OR MUX_PB16A_EIC_EXTINT0);
  PORT_PB16A_EIC_EXTINT0=   (1 shl 16);
  PIN_PA00A_EIC_EXTINT0 =    0;  // EIC signal: EXTINT0 on PA00 mux A */
  MUX_PA00A_EIC_EXTINT0 =    0;
  PINMUX_PA00A_EIC_EXTINT0= ((PIN_PA00A_EIC_EXTINT0 shl 16) OR MUX_PA00A_EIC_EXTINT0);
  PORT_PA00A_EIC_EXTINT0=   (1 shl 0);
  PIN_PA17A_EIC_EXTINT1 =   17;  // EIC signal: EXTINT1 on PA17 mux A */
  MUX_PA17A_EIC_EXTINT1 =    0;
  PINMUX_PA17A_EIC_EXTINT1= ((PIN_PA17A_EIC_EXTINT1 shl 16) OR MUX_PA17A_EIC_EXTINT1);
  PORT_PA17A_EIC_EXTINT1=   (1 shl 17);
  PIN_PB01A_EIC_EXTINT1 =   33;  // EIC signal: EXTINT1 on PB01 mux A */
  MUX_PB01A_EIC_EXTINT1 =    0;
  PINMUX_PB01A_EIC_EXTINT1= ((PIN_PB01A_EIC_EXTINT1 shl 16) OR MUX_PB01A_EIC_EXTINT1);
  PORT_PB01A_EIC_EXTINT1=   (1 shl 1);
  PIN_PB17A_EIC_EXTINT1 =   49;  // EIC signal: EXTINT1 on PB17 mux A */
  MUX_PB17A_EIC_EXTINT1 =    0;
  PINMUX_PB17A_EIC_EXTINT1= ((PIN_PB17A_EIC_EXTINT1 shl 16) OR MUX_PB17A_EIC_EXTINT1);
  PORT_PB17A_EIC_EXTINT1=   (1 shl 17);
  PIN_PA01A_EIC_EXTINT1 =    1;  // EIC signal: EXTINT1 on PA01 mux A */
  MUX_PA01A_EIC_EXTINT1 =    0;
  PINMUX_PA01A_EIC_EXTINT1= ((PIN_PA01A_EIC_EXTINT1 shl 16) OR MUX_PA01A_EIC_EXTINT1);
  PORT_PA01A_EIC_EXTINT1=   (1 shl 1);
  PIN_PA18A_EIC_EXTINT2 =   18;  // EIC signal: EXTINT2 on PA18 mux A */
  MUX_PA18A_EIC_EXTINT2 =    0;
  PINMUX_PA18A_EIC_EXTINT2= ((PIN_PA18A_EIC_EXTINT2 shl 16) OR MUX_PA18A_EIC_EXTINT2);
  PORT_PA18A_EIC_EXTINT2=   (1 shl 18);
  PIN_PA02A_EIC_EXTINT2 =    2;  // EIC signal: EXTINT2 on PA02 mux A */
  MUX_PA02A_EIC_EXTINT2 =    0;
  PINMUX_PA02A_EIC_EXTINT2= ((PIN_PA02A_EIC_EXTINT2 shl 16) OR MUX_PA02A_EIC_EXTINT2);
  PORT_PA02A_EIC_EXTINT2=   (1 shl 2);
  PIN_PB02A_EIC_EXTINT2 =   34;  // EIC signal: EXTINT2 on PB02 mux A */
  MUX_PB02A_EIC_EXTINT2 =    0;
  PINMUX_PB02A_EIC_EXTINT2= ((PIN_PB02A_EIC_EXTINT2 shl 16) OR MUX_PB02A_EIC_EXTINT2);
  PORT_PB02A_EIC_EXTINT2=   (1 shl 2);
  PIN_PA03A_EIC_EXTINT3 =    3;  // EIC signal: EXTINT3 on PA03 mux A */
  MUX_PA03A_EIC_EXTINT3 =    0;
  PINMUX_PA03A_EIC_EXTINT3= ((PIN_PA03A_EIC_EXTINT3 shl 16) OR MUX_PA03A_EIC_EXTINT3);
  PORT_PA03A_EIC_EXTINT3=   (1 shl 3);
  PIN_PA19A_EIC_EXTINT3 =   19;  // EIC signal: EXTINT3 on PA19 mux A */
  MUX_PA19A_EIC_EXTINT3 =    0;
  PINMUX_PA19A_EIC_EXTINT3= ((PIN_PA19A_EIC_EXTINT3 shl 16) OR MUX_PA19A_EIC_EXTINT3);
  PORT_PA19A_EIC_EXTINT3=   (1 shl 19);
  PIN_PB03A_EIC_EXTINT3 =   35;  // EIC signal: EXTINT3 on PB03 mux A */
  MUX_PB03A_EIC_EXTINT3 =    0;
  PINMUX_PB03A_EIC_EXTINT3= ((PIN_PB03A_EIC_EXTINT3 shl 16) OR MUX_PB03A_EIC_EXTINT3);
  PORT_PB03A_EIC_EXTINT3=   (1 shl 3);
  PIN_PA04A_EIC_EXTINT4 =    4;  // EIC signal: EXTINT4 on PA04 mux A */
  MUX_PA04A_EIC_EXTINT4 =    0;
  PINMUX_PA04A_EIC_EXTINT4= ((PIN_PA04A_EIC_EXTINT4 shl 16) OR MUX_PA04A_EIC_EXTINT4);
  PORT_PA04A_EIC_EXTINT4=   (1 shl 4);
  PIN_PA20A_EIC_EXTINT4 =   20;  // EIC signal: EXTINT4 on PA20 mux A */
  MUX_PA20A_EIC_EXTINT4 =    0;
  PINMUX_PA20A_EIC_EXTINT4= ((PIN_PA20A_EIC_EXTINT4 shl 16) OR MUX_PA20A_EIC_EXTINT4);
  PORT_PA20A_EIC_EXTINT4=   (1 shl 20);
  PIN_PB04A_EIC_EXTINT4 =   36;  // EIC signal: EXTINT4 on PB04 mux A */
  MUX_PB04A_EIC_EXTINT4 =    0;
  PINMUX_PB04A_EIC_EXTINT4= ((PIN_PB04A_EIC_EXTINT4 shl 16) OR MUX_PB04A_EIC_EXTINT4);
  PORT_PB04A_EIC_EXTINT4=   (1 shl 4);
  PIN_PA05A_EIC_EXTINT5 =    5;  // EIC signal: EXTINT5 on PA05 mux A */
  MUX_PA05A_EIC_EXTINT5 =    0;
  PINMUX_PA05A_EIC_EXTINT5= ((PIN_PA05A_EIC_EXTINT5 shl 16) OR MUX_PA05A_EIC_EXTINT5);
  PORT_PA05A_EIC_EXTINT5=   (1 shl 5);
  PIN_PA21A_EIC_EXTINT5 =   21;  // EIC signal: EXTINT5 on PA21 mux A */
  MUX_PA21A_EIC_EXTINT5 =    0;
  PINMUX_PA21A_EIC_EXTINT5= ((PIN_PA21A_EIC_EXTINT5 shl 16) OR MUX_PA21A_EIC_EXTINT5);
  PORT_PA21A_EIC_EXTINT5=   (1 shl 21);
  PIN_PB05A_EIC_EXTINT5 =   37;  // EIC signal: EXTINT5 on PB05 mux A */
  MUX_PB05A_EIC_EXTINT5 =    0;
  PINMUX_PB05A_EIC_EXTINT5= ((PIN_PB05A_EIC_EXTINT5 shl 16) OR MUX_PB05A_EIC_EXTINT5);
  PORT_PB05A_EIC_EXTINT5=   (1 shl 5);
  PIN_PA06A_EIC_EXTINT6 =    6;  // EIC signal: EXTINT6 on PA06 mux A */
  MUX_PA06A_EIC_EXTINT6 =    0;
  PINMUX_PA06A_EIC_EXTINT6= ((PIN_PA06A_EIC_EXTINT6 shl 16) OR MUX_PA06A_EIC_EXTINT6);
  PORT_PA06A_EIC_EXTINT6=   (1 shl 6);
  PIN_PA22A_EIC_EXTINT6 =   22;  // EIC signal: EXTINT6 on PA22 mux A */
  MUX_PA22A_EIC_EXTINT6 =    0;
  PINMUX_PA22A_EIC_EXTINT6= ((PIN_PA22A_EIC_EXTINT6 shl 16) OR MUX_PA22A_EIC_EXTINT6);
  PORT_PA22A_EIC_EXTINT6=   (1 shl 22);
  PIN_PB06A_EIC_EXTINT6 =   38;  // EIC signal: EXTINT6 on PB06 mux A */
  MUX_PB06A_EIC_EXTINT6 =    0;
  PINMUX_PB06A_EIC_EXTINT6= ((PIN_PB06A_EIC_EXTINT6 shl 16) OR MUX_PB06A_EIC_EXTINT6);
  PORT_PB06A_EIC_EXTINT6=   (1 shl 6);
  PIN_PB22A_EIC_EXTINT6 =   54;  // EIC signal: EXTINT6 on PB22 mux A */
  MUX_PB22A_EIC_EXTINT6 =    0;
  PINMUX_PB22A_EIC_EXTINT6= ((PIN_PB22A_EIC_EXTINT6 shl 16) OR MUX_PB22A_EIC_EXTINT6);
  PORT_PB22A_EIC_EXTINT6=   (1 shl 22);
  PIN_PA07A_EIC_EXTINT7 =    7;  // EIC signal: EXTINT7 on PA07 mux A */
  MUX_PA07A_EIC_EXTINT7 =    0;
  PINMUX_PA07A_EIC_EXTINT7= ((PIN_PA07A_EIC_EXTINT7 shl 16) OR MUX_PA07A_EIC_EXTINT7);
  PORT_PA07A_EIC_EXTINT7=   (1 shl 7);
  PIN_PA23A_EIC_EXTINT7 =   23;  // EIC signal: EXTINT7 on PA23 mux A */
  MUX_PA23A_EIC_EXTINT7 =    0;
  PINMUX_PA23A_EIC_EXTINT7= ((PIN_PA23A_EIC_EXTINT7 shl 16) OR MUX_PA23A_EIC_EXTINT7);
  PORT_PA23A_EIC_EXTINT7=   (1 shl 23);
  PIN_PB07A_EIC_EXTINT7 =   39;  // EIC signal: EXTINT7 on PB07 mux A */
  MUX_PB07A_EIC_EXTINT7 =    0;
  PINMUX_PB07A_EIC_EXTINT7= ((PIN_PB07A_EIC_EXTINT7 shl 16) OR MUX_PB07A_EIC_EXTINT7);
  PORT_PB07A_EIC_EXTINT7=   (1 shl 7);
  PIN_PB23A_EIC_EXTINT7 =   55;  // EIC signal: EXTINT7 on PB23 mux A */
  MUX_PB23A_EIC_EXTINT7 =    0;
  PINMUX_PB23A_EIC_EXTINT7= ((PIN_PB23A_EIC_EXTINT7 shl 16) OR MUX_PB23A_EIC_EXTINT7);
  PORT_PB23A_EIC_EXTINT7=   (1 shl 23);
  PIN_PA28A_EIC_EXTINT8 =   28;  // EIC signal: EXTINT8 on PA28 mux A */
  MUX_PA28A_EIC_EXTINT8 =    0;
  PINMUX_PA28A_EIC_EXTINT8= ((PIN_PA28A_EIC_EXTINT8 shl 16) OR MUX_PA28A_EIC_EXTINT8);
  PORT_PA28A_EIC_EXTINT8=   (1 shl 28);
  PIN_PB08A_EIC_EXTINT8 =   40;  // EIC signal: EXTINT8 on PB08 mux A */
  MUX_PB08A_EIC_EXTINT8 =    0;
  PINMUX_PB08A_EIC_EXTINT8= ((PIN_PB08A_EIC_EXTINT8 shl 16) OR MUX_PB08A_EIC_EXTINT8);
  PORT_PB08A_EIC_EXTINT8=   (1 shl 8);
  PIN_PA09A_EIC_EXTINT9 =    9;  // EIC signal: EXTINT9 on PA09 mux A */
  MUX_PA09A_EIC_EXTINT9 =    0;
  PINMUX_PA09A_EIC_EXTINT9= ((PIN_PA09A_EIC_EXTINT9 shl 16) OR MUX_PA09A_EIC_EXTINT9);
  PORT_PA09A_EIC_EXTINT9=   (1 shl 9);
  PIN_PB09A_EIC_EXTINT9 =   41;  // EIC signal: EXTINT9 on PB09 mux A */
  MUX_PB09A_EIC_EXTINT9 =    0;
  PINMUX_PB09A_EIC_EXTINT9= ((PIN_PB09A_EIC_EXTINT9 shl 16) OR MUX_PB09A_EIC_EXTINT9);
  PORT_PB09A_EIC_EXTINT9=   (1 shl 9);
  PIN_PA10A_EIC_EXTINT10 =  10;  // EIC signal: EXTINT10 on PA10 mux A */
  MUX_PA10A_EIC_EXTINT10 =   0;
  PINMUX_PA10A_EIC_EXTINT10=  ((PIN_PA10A_EIC_EXTINT10 shl 16) OR MUX_PA10A_EIC_EXTINT10);
  PORT_PA10A_EIC_EXTINT10=  (1 shl 10);
  PIN_PA30A_EIC_EXTINT10 =  30;  // EIC signal: EXTINT10 on PA30 mux A */
  MUX_PA30A_EIC_EXTINT10 =   0;
  PINMUX_PA30A_EIC_EXTINT10=  ((PIN_PA30A_EIC_EXTINT10 shl 16) OR MUX_PA30A_EIC_EXTINT10);
  PORT_PA30A_EIC_EXTINT10=  (1 shl 30);
  PIN_PB10A_EIC_EXTINT10 =  42;  // EIC signal: EXTINT10 on PB10 mux A */
  MUX_PB10A_EIC_EXTINT10 =   0;
  PINMUX_PB10A_EIC_EXTINT10=  ((PIN_PB10A_EIC_EXTINT10 shl 16) OR MUX_PB10A_EIC_EXTINT10);
  PORT_PB10A_EIC_EXTINT10=  (1 shl 10);
  PIN_PA11A_EIC_EXTINT11 =  11;  // EIC signal: EXTINT11 on PA11 mux A */
  MUX_PA11A_EIC_EXTINT11 =   0;
  PINMUX_PA11A_EIC_EXTINT11=  ((PIN_PA11A_EIC_EXTINT11 shl 16) OR MUX_PA11A_EIC_EXTINT11);
  PORT_PA11A_EIC_EXTINT11=  (1 shl 11);
  PIN_PA31A_EIC_EXTINT11 =  31;  // EIC signal: EXTINT11 on PA31 mux A */
  MUX_PA31A_EIC_EXTINT11 =   0;
  PINMUX_PA31A_EIC_EXTINT11 = ((PIN_PA31A_EIC_EXTINT11 shl 16) OR MUX_PA31A_EIC_EXTINT11);
  PORT_PA31A_EIC_EXTINT11=  (1 shl 31);
  PIN_PB11A_EIC_EXTINT11 =  43;  // EIC signal: EXTINT11 on PB11 mux A */
  MUX_PB11A_EIC_EXTINT11 =   0;
  PINMUX_PB11A_EIC_EXTINT11 = ((PIN_PB11A_EIC_EXTINT11 shl 16) OR MUX_PB11A_EIC_EXTINT11);
  PORT_PB11A_EIC_EXTINT11=  (1 shl 11);
  PIN_PA12A_EIC_EXTINT12 =  12;  // EIC signal: EXTINT12 on PA12 mux A */
  MUX_PA12A_EIC_EXTINT12 =   0;
  PINMUX_PA12A_EIC_EXTINT12 = ((PIN_PA12A_EIC_EXTINT12 shl 16) OR MUX_PA12A_EIC_EXTINT12);
  PORT_PA12A_EIC_EXTINT12=  (1 shl 12);
  PIN_PA24A_EIC_EXTINT12 =  24;  // EIC signal: EXTINT12 on PA24 mux A */
  MUX_PA24A_EIC_EXTINT12 =   0;
  PINMUX_PA24A_EIC_EXTINT12 = ((PIN_PA24A_EIC_EXTINT12 shl 16) OR MUX_PA24A_EIC_EXTINT12);
  PORT_PA24A_EIC_EXTINT12=  (1 shl 24);
  PIN_PB12A_EIC_EXTINT12 =  44;  // EIC signal: EXTINT12 on PB12 mux A */
  MUX_PB12A_EIC_EXTINT12 =   0;
  PINMUX_PB12A_EIC_EXTINT12 = ((PIN_PB12A_EIC_EXTINT12 shl 16) OR MUX_PB12A_EIC_EXTINT12);
  PORT_PB12A_EIC_EXTINT12=  (1 shl 12);
  PIN_PA13A_EIC_EXTINT13 =  13;  // EIC signal: EXTINT13 on PA13 mux A */
  MUX_PA13A_EIC_EXTINT13 =   0;
  PINMUX_PA13A_EIC_EXTINT13 = ((PIN_PA13A_EIC_EXTINT13 shl 16) OR MUX_PA13A_EIC_EXTINT13);
  PORT_PA13A_EIC_EXTINT13=  (1 shl 13);
  PIN_PA25A_EIC_EXTINT13 =  25;  // EIC signal: EXTINT13 on PA25 mux A */
  MUX_PA25A_EIC_EXTINT13 =   0;
  PINMUX_PA25A_EIC_EXTINT13 = ((PIN_PA25A_EIC_EXTINT13 shl 16) OR MUX_PA25A_EIC_EXTINT13);
  PORT_PA25A_EIC_EXTINT13=  (1 shl 25);
  PIN_PB13A_EIC_EXTINT13 =  45;  // EIC signal: EXTINT13 on PB13 mux A */
  MUX_PB13A_EIC_EXTINT13 =   0;
  PINMUX_PB13A_EIC_EXTINT13 = ((PIN_PB13A_EIC_EXTINT13 shl 16) OR MUX_PB13A_EIC_EXTINT13);
  PORT_PB13A_EIC_EXTINT13=  (1 shl 13);
  PIN_PB14A_EIC_EXTINT14 =  46;  // EIC signal: EXTINT14 on PB14 mux A */
  MUX_PB14A_EIC_EXTINT14 =   0;
  PINMUX_PB14A_EIC_EXTINT14 = ((PIN_PB14A_EIC_EXTINT14 shl 16) OR MUX_PB14A_EIC_EXTINT14);
  PORT_PB14A_EIC_EXTINT14=  (1 shl 14);
  PIN_PB30A_EIC_EXTINT14 =  62;  // EIC signal: EXTINT14 on PB30 mux A */
  MUX_PB30A_EIC_EXTINT14 =   0;
  PINMUX_PB30A_EIC_EXTINT14 = ((PIN_PB30A_EIC_EXTINT14 shl 16) OR MUX_PB30A_EIC_EXTINT14);
  PORT_PB30A_EIC_EXTINT14=  (1 shl 30);
  PIN_PA14A_EIC_EXTINT14 =  14;  // EIC signal: EXTINT14 on PA14 mux A */
  MUX_PA14A_EIC_EXTINT14 =   0;
  PINMUX_PA14A_EIC_EXTINT14 = ((PIN_PA14A_EIC_EXTINT14 shl 16) OR MUX_PA14A_EIC_EXTINT14);
  PORT_PA14A_EIC_EXTINT14=  (1 shl 14);
  PIN_PA15A_EIC_EXTINT15 =  15;  // EIC signal: EXTINT15 on PA15 mux A */
  MUX_PA15A_EIC_EXTINT15 =   0;
  PINMUX_PA15A_EIC_EXTINT15 = ((PIN_PA15A_EIC_EXTINT15 shl 16) OR MUX_PA15A_EIC_EXTINT15);
  PORT_PA15A_EIC_EXTINT15=  (1 shl 15);
  PIN_PA27A_EIC_EXTINT15 =  27;  // EIC signal: EXTINT15 on PA27 mux A */
  MUX_PA27A_EIC_EXTINT15 =   0;
  PINMUX_PA27A_EIC_EXTINT15 = ((PIN_PA27A_EIC_EXTINT15 shl 16) OR MUX_PA27A_EIC_EXTINT15);
  PORT_PA27A_EIC_EXTINT15=  (1 shl 27);
  PIN_PB15A_EIC_EXTINT15 =  47;  // EIC signal: EXTINT15 on PB15 mux A */
  MUX_PB15A_EIC_EXTINT15 =   0;
  PINMUX_PB15A_EIC_EXTINT15 = ((PIN_PB15A_EIC_EXTINT15 shl 16) OR MUX_PB15A_EIC_EXTINT15);
  PORT_PB15A_EIC_EXTINT15=  (1 shl 15);
  PIN_PB31A_EIC_EXTINT15 =  63;  // EIC signal: EXTINT15 on PB31 mux A */
  MUX_PB31A_EIC_EXTINT15 =   0;
  PINMUX_PB31A_EIC_EXTINT15 = ((PIN_PB31A_EIC_EXTINT15 shl 16) OR MUX_PB31A_EIC_EXTINT15);
  PORT_PB31A_EIC_EXTINT15=  (1 shl 31);
  PIN_PA08A_EIC_NMI  =  8;  // EIC signal: NMI on PA08 mux A */
  MUX_PA08A_EIC_NMI  =  0;
  PINMUX_PA08A_EIC_NMI =  ((PIN_PA08A_EIC_NMI shl 16) OR MUX_PA08A_EIC_NMI);
  PORT_PA08A_EIC_NMI = (1 shl 8);
  // ========== PORT definition for USB peripheral ========== */
  PIN_PA24G_USB_DM  =  24;  // USB signal: DM on PA24 mux G */
  MUX_PA24G_USB_DM  =   6;
  PINMUX_PA24G_USB_DM =  ((PIN_PA24G_USB_DM shl 16) OR MUX_PA24G_USB_DM);
  PORT_PA24G_USB_DM =  (1 shl 24);
  PIN_PA25G_USB_DP  =  25;  // USB signal: DP on PA25 mux G */
  MUX_PA25G_USB_DP  =   6;
  PINMUX_PA25G_USB_DP =  ((PIN_PA25G_USB_DP shl 16) OR MUX_PA25G_USB_DP);
  PORT_PA25G_USB_DP =  (1 shl 25);
  PIN_PA23G_USB_SOF_1KHZ =  23;  // USB signal: SOF_1KHZ on PA23 mux G */
  MUX_PA23G_USB_SOF_1KHZ =   6;
  PINMUX_PA23G_USB_SOF_1KHZ = ((PIN_PA23G_USB_SOF_1KHZ shl 16) OR MUX_PA23G_USB_SOF_1KHZ);
  PORT_PA23G_USB_SOF_1KHZ=  (1 shl 23);
  // ========== PORT definition for SERCOM0 peripheral ========== */
  PIN_PA04D_SERCOM0_PAD0 =   4;  // SERCOM0 signal: PAD0 on PA04 mux D */
  MUX_PA04D_SERCOM0_PAD0 =   3;
  PINMUX_PA04D_SERCOM0_PAD0 = ((PIN_PA04D_SERCOM0_PAD0 shl 16) OR MUX_PA04D_SERCOM0_PAD0);
  PORT_PA04D_SERCOM0_PAD0=  (1 shl 4);
  PIN_PA08C_SERCOM0_PAD0 =   8;  // SERCOM0 signal: PAD0 on PA08 mux C */
  MUX_PA08C_SERCOM0_PAD0 =   2;
  PINMUX_PA08C_SERCOM0_PAD0 = ((PIN_PA08C_SERCOM0_PAD0 shl 16) OR MUX_PA08C_SERCOM0_PAD0);
  PORT_PA08C_SERCOM0_PAD0=  (1 shl 8);
  PIN_PA05D_SERCOM0_PAD1 =   5;  // SERCOM0 signal: PAD1 on PA05 mux D */
  MUX_PA05D_SERCOM0_PAD1 =   3;
  PINMUX_PA05D_SERCOM0_PAD1 = ((PIN_PA05D_SERCOM0_PAD1 shl 16) OR MUX_PA05D_SERCOM0_PAD1);
  PORT_PA05D_SERCOM0_PAD1=  (1 shl 5);
  PIN_PA09C_SERCOM0_PAD1 =   9;  // SERCOM0 signal: PAD1 on PA09 mux C */
  MUX_PA09C_SERCOM0_PAD1 =   2;
  PINMUX_PA09C_SERCOM0_PAD1 = ((PIN_PA09C_SERCOM0_PAD1 shl 16) OR MUX_PA09C_SERCOM0_PAD1);
  PORT_PA09C_SERCOM0_PAD1=  (1 shl 9);
  PIN_PA06D_SERCOM0_PAD2 =   6;  // SERCOM0 signal: PAD2 on PA06 mux D */
  MUX_PA06D_SERCOM0_PAD2 =   3;
  PINMUX_PA06D_SERCOM0_PAD2 = ((PIN_PA06D_SERCOM0_PAD2 shl 16) OR MUX_PA06D_SERCOM0_PAD2);
  PORT_PA06D_SERCOM0_PAD2=  (1 shl 6);
  PIN_PA10C_SERCOM0_PAD2 =  10;  // SERCOM0 signal: PAD2 on PA10 mux C */
  MUX_PA10C_SERCOM0_PAD2 =   2;
  PINMUX_PA10C_SERCOM0_PAD2 = ((PIN_PA10C_SERCOM0_PAD2 shl 16) OR MUX_PA10C_SERCOM0_PAD2);
  PORT_PA10C_SERCOM0_PAD2=  (1 shl 10);
  PIN_PA07D_SERCOM0_PAD3 =   7;  // SERCOM0 signal: PAD3 on PA07 mux D */
  MUX_PA07D_SERCOM0_PAD3 =   3;
  PINMUX_PA07D_SERCOM0_PAD3 = ((PIN_PA07D_SERCOM0_PAD3 shl 16) OR MUX_PA07D_SERCOM0_PAD3);
  PORT_PA07D_SERCOM0_PAD3=  (1 shl 7);
  PIN_PA11C_SERCOM0_PAD3 =  11;  // SERCOM0 signal: PAD3 on PA11 mux C */
  MUX_PA11C_SERCOM0_PAD3 =   2;
  PINMUX_PA11C_SERCOM0_PAD3 = ((PIN_PA11C_SERCOM0_PAD3 shl 16) OR MUX_PA11C_SERCOM0_PAD3);
  PORT_PA11C_SERCOM0_PAD3=  (1 shl 11);
  // ========== PORT definition for SERCOM1 peripheral ========== */
  PIN_PA16C_SERCOM1_PAD0 =  16;  // SERCOM1 signal: PAD0 on PA16 mux C */
  MUX_PA16C_SERCOM1_PAD0 =   2;
  PINMUX_PA16C_SERCOM1_PAD0 = ((PIN_PA16C_SERCOM1_PAD0 shl 16) OR MUX_PA16C_SERCOM1_PAD0);
  PORT_PA16C_SERCOM1_PAD0=  (1 shl 16);
  PIN_PA00D_SERCOM1_PAD0 =   0;  // SERCOM1 signal: PAD0 on PA00 mux D */
  MUX_PA00D_SERCOM1_PAD0 =   3;
  PINMUX_PA00D_SERCOM1_PAD0 = ((PIN_PA00D_SERCOM1_PAD0 shl 16) OR MUX_PA00D_SERCOM1_PAD0);
  PORT_PA00D_SERCOM1_PAD0=  (1 shl 0);
  PIN_PA17C_SERCOM1_PAD1 =  17;  // SERCOM1 signal: PAD1 on PA17 mux C */
  MUX_PA17C_SERCOM1_PAD1 =   2;
  PINMUX_PA17C_SERCOM1_PAD1 = ((PIN_PA17C_SERCOM1_PAD1 shl 16) OR MUX_PA17C_SERCOM1_PAD1);
  PORT_PA17C_SERCOM1_PAD1=  (1 shl 17);
  PIN_PA01D_SERCOM1_PAD1 =   1;  // SERCOM1 signal: PAD1 on PA01 mux D */
  MUX_PA01D_SERCOM1_PAD1 =   3;
  PINMUX_PA01D_SERCOM1_PAD1 = ((PIN_PA01D_SERCOM1_PAD1 shl 16) OR MUX_PA01D_SERCOM1_PAD1);
  PORT_PA01D_SERCOM1_PAD1=  (1 shl 1);
  PIN_PA30D_SERCOM1_PAD2 =  30;  // SERCOM1 signal: PAD2 on PA30 mux D */
  MUX_PA30D_SERCOM1_PAD2 =   3;
  PINMUX_PA30D_SERCOM1_PAD2 = ((PIN_PA30D_SERCOM1_PAD2 shl 16) OR MUX_PA30D_SERCOM1_PAD2);
  PORT_PA30D_SERCOM1_PAD2=  (1 shl 30);
  PIN_PA18C_SERCOM1_PAD2 =  18;  // SERCOM1 signal: PAD2 on PA18 mux C */
  MUX_PA18C_SERCOM1_PAD2 =   2;
  PINMUX_PA18C_SERCOM1_PAD2 = ((PIN_PA18C_SERCOM1_PAD2 shl 16) OR MUX_PA18C_SERCOM1_PAD2);
  PORT_PA18C_SERCOM1_PAD2=  (1 shl 18);
  PIN_PA31D_SERCOM1_PAD3 =  31;  // SERCOM1 signal: PAD3 on PA31 mux D */
  MUX_PA31D_SERCOM1_PAD3 =   3;
  PINMUX_PA31D_SERCOM1_PAD3 = ((PIN_PA31D_SERCOM1_PAD3 shl 16) OR MUX_PA31D_SERCOM1_PAD3);
  PORT_PA31D_SERCOM1_PAD3=  (1 shl 31);
  PIN_PA19C_SERCOM1_PAD3 =  19;  // SERCOM1 signal: PAD3 on PA19 mux C */
  MUX_PA19C_SERCOM1_PAD3 =   2;
  PINMUX_PA19C_SERCOM1_PAD3 = ((PIN_PA19C_SERCOM1_PAD3 shl 16) OR MUX_PA19C_SERCOM1_PAD3);
  PORT_PA19C_SERCOM1_PAD3=  (1 shl 19);
  // ========== PORT definition for SERCOM2 peripheral ========== */
  PIN_PA08D_SERCOM2_PAD0 =   8;  // SERCOM2 signal: PAD0 on PA08 mux D */
  MUX_PA08D_SERCOM2_PAD0 =   3;
  PINMUX_PA08D_SERCOM2_PAD0 = ((PIN_PA08D_SERCOM2_PAD0 shl 16) OR MUX_PA08D_SERCOM2_PAD0);
  PORT_PA08D_SERCOM2_PAD0=  (1 shl 8);
  PIN_PA12C_SERCOM2_PAD0 =  12;  // SERCOM2 signal: PAD0 on PA12 mux C */
  MUX_PA12C_SERCOM2_PAD0 =   2;
  PINMUX_PA12C_SERCOM2_PAD0 = ((PIN_PA12C_SERCOM2_PAD0 shl 16) OR MUX_PA12C_SERCOM2_PAD0);
  PORT_PA12C_SERCOM2_PAD0=  (1 shl 12);
  PIN_PA09D_SERCOM2_PAD1 =   9;  // SERCOM2 signal: PAD1 on PA09 mux D */
  MUX_PA09D_SERCOM2_PAD1 =   3;
  PINMUX_PA09D_SERCOM2_PAD1 = ((PIN_PA09D_SERCOM2_PAD1 shl 16) OR MUX_PA09D_SERCOM2_PAD1);
  PORT_PA09D_SERCOM2_PAD1=  (1 shl 9);
  PIN_PA13C_SERCOM2_PAD1 =  13;  // SERCOM2 signal: PAD1 on PA13 mux C */
  MUX_PA13C_SERCOM2_PAD1 =   2;
  PINMUX_PA13C_SERCOM2_PAD1 = ((PIN_PA13C_SERCOM2_PAD1 shl 16) OR MUX_PA13C_SERCOM2_PAD1);
  PORT_PA13C_SERCOM2_PAD1=  (1 shl 13);
  PIN_PA10D_SERCOM2_PAD2 =  10;  // SERCOM2 signal: PAD2 on PA10 mux D */
  MUX_PA10D_SERCOM2_PAD2 =   3;
  PINMUX_PA10D_SERCOM2_PAD2 = ((PIN_PA10D_SERCOM2_PAD2 shl 16) OR MUX_PA10D_SERCOM2_PAD2);
  PORT_PA10D_SERCOM2_PAD2=  (1 shl 10);
  PIN_PA14C_SERCOM2_PAD2 =  14;  // SERCOM2 signal: PAD2 on PA14 mux C */
  MUX_PA14C_SERCOM2_PAD2 =   2;
  PINMUX_PA14C_SERCOM2_PAD2 = ((PIN_PA14C_SERCOM2_PAD2 shl 16) OR MUX_PA14C_SERCOM2_PAD2);
  PORT_PA14C_SERCOM2_PAD2=  (1 shl 14);
  PIN_PA11D_SERCOM2_PAD3 =  11;  // SERCOM2 signal: PAD3 on PA11 mux D */
  MUX_PA11D_SERCOM2_PAD3 =   3;
  PINMUX_PA11D_SERCOM2_PAD3 = ((PIN_PA11D_SERCOM2_PAD3 shl 16) OR MUX_PA11D_SERCOM2_PAD3);
  PORT_PA11D_SERCOM2_PAD3=  (1 shl 11);
  PIN_PA15C_SERCOM2_PAD3 =  15;  // SERCOM2 signal: PAD3 on PA15 mux C */
  MUX_PA15C_SERCOM2_PAD3 =   2;
  PINMUX_PA15C_SERCOM2_PAD3 = ((PIN_PA15C_SERCOM2_PAD3 shl 16) OR MUX_PA15C_SERCOM2_PAD3);
  PORT_PA15C_SERCOM2_PAD3=  (1 shl 15);
  // ========== PORT definition for SERCOM3 peripheral ========== */
  PIN_PA16D_SERCOM3_PAD0 =  16;  // SERCOM3 signal: PAD0 on PA16 mux D */
  MUX_PA16D_SERCOM3_PAD0 =   3;
  PINMUX_PA16D_SERCOM3_PAD0 = ((PIN_PA16D_SERCOM3_PAD0 shl 16) OR MUX_PA16D_SERCOM3_PAD0);
  PORT_PA16D_SERCOM3_PAD0=  (1 shl 16);
  PIN_PA22C_SERCOM3_PAD0 =  22;  // SERCOM3 signal: PAD0 on PA22 mux C */
  MUX_PA22C_SERCOM3_PAD0 =   2;
  PINMUX_PA22C_SERCOM3_PAD0 = ((PIN_PA22C_SERCOM3_PAD0 shl 16) OR MUX_PA22C_SERCOM3_PAD0);
  PORT_PA22C_SERCOM3_PAD0=  (1 shl 22);
  PIN_PA17D_SERCOM3_PAD1 =  17;  // SERCOM3 signal: PAD1 on PA17 mux D */
  MUX_PA17D_SERCOM3_PAD1 =   3;
  PINMUX_PA17D_SERCOM3_PAD1 = ((PIN_PA17D_SERCOM3_PAD1 shl 16) OR MUX_PA17D_SERCOM3_PAD1);
  PORT_PA17D_SERCOM3_PAD1=  (1 shl 17);
  PIN_PA23C_SERCOM3_PAD1 =  23;  // SERCOM3 signal: PAD1 on PA23 mux C */
  MUX_PA23C_SERCOM3_PAD1 =   2;
  PINMUX_PA23C_SERCOM3_PAD1 = ((PIN_PA23C_SERCOM3_PAD1 shl 16) OR MUX_PA23C_SERCOM3_PAD1);
  PORT_PA23C_SERCOM3_PAD1=  (1 shl 23);
  PIN_PA18D_SERCOM3_PAD2 =  18;  // SERCOM3 signal: PAD2 on PA18 mux D */
  MUX_PA18D_SERCOM3_PAD2 =   3;
  PINMUX_PA18D_SERCOM3_PAD2 = ((PIN_PA18D_SERCOM3_PAD2 shl 16) OR MUX_PA18D_SERCOM3_PAD2);
  PORT_PA18D_SERCOM3_PAD2=  (1 shl 18);
  PIN_PA20D_SERCOM3_PAD2 =  20;  // SERCOM3 signal: PAD2 on PA20 mux D */
  MUX_PA20D_SERCOM3_PAD2 =   3;
  PINMUX_PA20D_SERCOM3_PAD2 = ((PIN_PA20D_SERCOM3_PAD2 shl 16) OR MUX_PA20D_SERCOM3_PAD2);
  PORT_PA20D_SERCOM3_PAD2=  (1 shl 20);
  PIN_PA24C_SERCOM3_PAD2 =  24;  // SERCOM3 signal: PAD2 on PA24 mux C */
  MUX_PA24C_SERCOM3_PAD2 =   2;
  PINMUX_PA24C_SERCOM3_PAD2 = ((PIN_PA24C_SERCOM3_PAD2 shl 16) OR MUX_PA24C_SERCOM3_PAD2);
  PORT_PA24C_SERCOM3_PAD2=  (1 shl 24);
  PIN_PA19D_SERCOM3_PAD3 =  19;  // SERCOM3 signal: PAD3 on PA19 mux D */
  MUX_PA19D_SERCOM3_PAD3 =   3;
  PINMUX_PA19D_SERCOM3_PAD3 = ((PIN_PA19D_SERCOM3_PAD3 shl 16) OR MUX_PA19D_SERCOM3_PAD3);
  PORT_PA19D_SERCOM3_PAD3=  (1 shl 19);
  PIN_PA21D_SERCOM3_PAD3 =  21;  // SERCOM3 signal: PAD3 on PA21 mux D */
  MUX_PA21D_SERCOM3_PAD3 =   3;
  PINMUX_PA21D_SERCOM3_PAD3 = ((PIN_PA21D_SERCOM3_PAD3 shl 16) OR MUX_PA21D_SERCOM3_PAD3);
  PORT_PA21D_SERCOM3_PAD3=  (1 shl 21);
  PIN_PA25C_SERCOM3_PAD3 =  25;  // SERCOM3 signal: PAD3 on PA25 mux C */
  MUX_PA25C_SERCOM3_PAD3 =   2;
  PINMUX_PA25C_SERCOM3_PAD3 = ((PIN_PA25C_SERCOM3_PAD3 shl 16) OR MUX_PA25C_SERCOM3_PAD3);
  PORT_PA25C_SERCOM3_PAD3=  (1 shl 25);
  // ========== PORT definition for SERCOM4 peripheral ========== */
  PIN_PA12D_SERCOM4_PAD0 =  12;  // SERCOM4 signal: PAD0 on PA12 mux D */
  MUX_PA12D_SERCOM4_PAD0 =   3;
  PINMUX_PA12D_SERCOM4_PAD0 = ((PIN_PA12D_SERCOM4_PAD0 shl 16) OR MUX_PA12D_SERCOM4_PAD0);
  PORT_PA12D_SERCOM4_PAD0=  (1 shl 12);
  PIN_PB08D_SERCOM4_PAD0 =  40;  // SERCOM4 signal: PAD0 on PB08 mux D */
  MUX_PB08D_SERCOM4_PAD0 =   3;
  PINMUX_PB08D_SERCOM4_PAD0 = ((PIN_PB08D_SERCOM4_PAD0 shl 16) OR MUX_PB08D_SERCOM4_PAD0);
  PORT_PB08D_SERCOM4_PAD0=  (1 shl 8);
  PIN_PB12C_SERCOM4_PAD0 =  44;  // SERCOM4 signal: PAD0 on PB12 mux C */
  MUX_PB12C_SERCOM4_PAD0 =   2;
  PINMUX_PB12C_SERCOM4_PAD0 = ((PIN_PB12C_SERCOM4_PAD0 shl 16) OR MUX_PB12C_SERCOM4_PAD0);
  PORT_PB12C_SERCOM4_PAD0=  (1 shl 12);
  PIN_PA13D_SERCOM4_PAD1 =  13;  // SERCOM4 signal: PAD1 on PA13 mux D */
  MUX_PA13D_SERCOM4_PAD1 =   3;
  PINMUX_PA13D_SERCOM4_PAD1 = ((PIN_PA13D_SERCOM4_PAD1 shl 16) OR MUX_PA13D_SERCOM4_PAD1);
  PORT_PA13D_SERCOM4_PAD1=  (1 shl 13);
  PIN_PB09D_SERCOM4_PAD1 =  41;  // SERCOM4 signal: PAD1 on PB09 mux D */
  MUX_PB09D_SERCOM4_PAD1 =   3;
  PINMUX_PB09D_SERCOM4_PAD1 = ((PIN_PB09D_SERCOM4_PAD1 shl 16) OR MUX_PB09D_SERCOM4_PAD1);
  PORT_PB09D_SERCOM4_PAD1=  (1 shl 9);
  PIN_PB13C_SERCOM4_PAD1 =  45;  // SERCOM4 signal: PAD1 on PB13 mux C */
  MUX_PB13C_SERCOM4_PAD1 =   2;
  PINMUX_PB13C_SERCOM4_PAD1 = ((PIN_PB13C_SERCOM4_PAD1 shl 16) OR MUX_PB13C_SERCOM4_PAD1);
  PORT_PB13C_SERCOM4_PAD1=  (1 shl 13);
  PIN_PA14D_SERCOM4_PAD2 =  14;  // SERCOM4 signal: PAD2 on PA14 mux D */
  MUX_PA14D_SERCOM4_PAD2 =   3;
  PINMUX_PA14D_SERCOM4_PAD2 = ((PIN_PA14D_SERCOM4_PAD2 shl 16) OR MUX_PA14D_SERCOM4_PAD2);
  PORT_PA14D_SERCOM4_PAD2=  (1 shl 14);
  PIN_PB10D_SERCOM4_PAD2 =  42;  // SERCOM4 signal: PAD2 on PB10 mux D */
  MUX_PB10D_SERCOM4_PAD2 =   3;
  PINMUX_PB10D_SERCOM4_PAD2 = ((PIN_PB10D_SERCOM4_PAD2 shl 16) OR MUX_PB10D_SERCOM4_PAD2);
  PORT_PB10D_SERCOM4_PAD2=  (1 shl 10);
  PIN_PB14C_SERCOM4_PAD2 =  46;  // SERCOM4 signal: PAD2 on PB14 mux C */
  MUX_PB14C_SERCOM4_PAD2 =   2;
  PINMUX_PB14C_SERCOM4_PAD2 = ((PIN_PB14C_SERCOM4_PAD2 shl 16) OR MUX_PB14C_SERCOM4_PAD2);
  PORT_PB14C_SERCOM4_PAD2=  (1 shl 14);
  PIN_PA15D_SERCOM4_PAD3 =  15;  // SERCOM4 signal: PAD3 on PA15 mux D */
  MUX_PA15D_SERCOM4_PAD3 =   3;
  PINMUX_PA15D_SERCOM4_PAD3 = ((PIN_PA15D_SERCOM4_PAD3 shl 16) OR MUX_PA15D_SERCOM4_PAD3);
  PORT_PA15D_SERCOM4_PAD3=  (1 shl 15);
  PIN_PB11D_SERCOM4_PAD3 =  43;  // SERCOM4 signal: PAD3 on PB11 mux D */
  MUX_PB11D_SERCOM4_PAD3 =   3;
  PINMUX_PB11D_SERCOM4_PAD3 = ((PIN_PB11D_SERCOM4_PAD3 shl 16) OR MUX_PB11D_SERCOM4_PAD3);
  PORT_PB11D_SERCOM4_PAD3=  (1 shl 11);
  PIN_PB15C_SERCOM4_PAD3 =  47;  // SERCOM4 signal: PAD3 on PB15 mux C */
  MUX_PB15C_SERCOM4_PAD3 =   2;
  PINMUX_PB15C_SERCOM4_PAD3 = ((PIN_PB15C_SERCOM4_PAD3 shl 16) OR MUX_PB15C_SERCOM4_PAD3);
  PORT_PB15C_SERCOM4_PAD3=  (1 shl 15);
  // ========== PORT definition for SERCOM5 peripheral ========== */
  PIN_PB16C_SERCOM5_PAD0 =  48;  // SERCOM5 signal: PAD0 on PB16 mux C */
  MUX_PB16C_SERCOM5_PAD0 =   2;
  PINMUX_PB16C_SERCOM5_PAD0 = ((PIN_PB16C_SERCOM5_PAD0 shl 16) OR MUX_PB16C_SERCOM5_PAD0);
  PORT_PB16C_SERCOM5_PAD0=  (1 shl 16);
  PIN_PA22D_SERCOM5_PAD0 =  22;  // SERCOM5 signal: PAD0 on PA22 mux D */
  MUX_PA22D_SERCOM5_PAD0 =   3;
  PINMUX_PA22D_SERCOM5_PAD0 = ((PIN_PA22D_SERCOM5_PAD0 shl 16) OR MUX_PA22D_SERCOM5_PAD0);
  PORT_PA22D_SERCOM5_PAD0=  (1 shl 22);
  PIN_PB02D_SERCOM5_PAD0 =  34;  // SERCOM5 signal: PAD0 on PB02 mux D */
  MUX_PB02D_SERCOM5_PAD0 =   3;
  PINMUX_PB02D_SERCOM5_PAD0 = ((PIN_PB02D_SERCOM5_PAD0 shl 16) OR MUX_PB02D_SERCOM5_PAD0);
  PORT_PB02D_SERCOM5_PAD0=  (1 shl 2);
  PIN_PB30D_SERCOM5_PAD0 =  62;  // SERCOM5 signal: PAD0 on PB30 mux D */
  MUX_PB30D_SERCOM5_PAD0 =   3;
  PINMUX_PB30D_SERCOM5_PAD0 = ((PIN_PB30D_SERCOM5_PAD0 shl 16) OR MUX_PB30D_SERCOM5_PAD0);
  PORT_PB30D_SERCOM5_PAD0=  (1 shl 30);
  PIN_PB17C_SERCOM5_PAD1 =  49;  // SERCOM5 signal: PAD1 on PB17 mux C */
  MUX_PB17C_SERCOM5_PAD1 =   2;
  PINMUX_PB17C_SERCOM5_PAD1 = ((PIN_PB17C_SERCOM5_PAD1 shl 16) OR MUX_PB17C_SERCOM5_PAD1);
  PORT_PB17C_SERCOM5_PAD1=  (1 shl 17);
  PIN_PA23D_SERCOM5_PAD1 =  23;  // SERCOM5 signal: PAD1 on PA23 mux D */
  MUX_PA23D_SERCOM5_PAD1 =   3;
  PINMUX_PA23D_SERCOM5_PAD1 = ((PIN_PA23D_SERCOM5_PAD1 shl 16) OR MUX_PA23D_SERCOM5_PAD1);
  PORT_PA23D_SERCOM5_PAD1=  (1 shl 23);
  PIN_PB03D_SERCOM5_PAD1 =  35;  // SERCOM5 signal: PAD1 on PB03 mux D */
  MUX_PB03D_SERCOM5_PAD1 =   3;
  PINMUX_PB03D_SERCOM5_PAD1 = ((PIN_PB03D_SERCOM5_PAD1 shl 16) OR MUX_PB03D_SERCOM5_PAD1);
  PORT_PB03D_SERCOM5_PAD1=  (1 shl 3);
  PIN_PB31D_SERCOM5_PAD1 =  63;  // SERCOM5 signal: PAD1 on PB31 mux D */
  MUX_PB31D_SERCOM5_PAD1 =   3;
  PINMUX_PB31D_SERCOM5_PAD1 = ((PIN_PB31D_SERCOM5_PAD1 shl 16) OR MUX_PB31D_SERCOM5_PAD1);
  PORT_PB31D_SERCOM5_PAD1=  (1 shl 31);
  PIN_PA24D_SERCOM5_PAD2 =  24;  // SERCOM5 signal: PAD2 on PA24 mux D */
  MUX_PA24D_SERCOM5_PAD2 =   3;
  PINMUX_PA24D_SERCOM5_PAD2 = ((PIN_PA24D_SERCOM5_PAD2 shl 16) OR MUX_PA24D_SERCOM5_PAD2);
  PORT_PA24D_SERCOM5_PAD2=  (1 shl 24);
  PIN_PB00D_SERCOM5_PAD2 =  32;  // SERCOM5 signal: PAD2 on PB00 mux D */
  MUX_PB00D_SERCOM5_PAD2 =   3;
  PINMUX_PB00D_SERCOM5_PAD2 = ((PIN_PB00D_SERCOM5_PAD2 shl 16) OR MUX_PB00D_SERCOM5_PAD2);
  PORT_PB00D_SERCOM5_PAD2=  (1 shl 0);
  PIN_PB22D_SERCOM5_PAD2 =  54;  // SERCOM5 signal: PAD2 on PB22 mux D */
  MUX_PB22D_SERCOM5_PAD2 =   3;
  PINMUX_PB22D_SERCOM5_PAD2 = ((PIN_PB22D_SERCOM5_PAD2 shl 16) OR MUX_PB22D_SERCOM5_PAD2);
  PORT_PB22D_SERCOM5_PAD2=  (1 shl 22);
  PIN_PA20C_SERCOM5_PAD2 =  20;  // SERCOM5 signal: PAD2 on PA20 mux C */
  MUX_PA20C_SERCOM5_PAD2 =   2;
  PINMUX_PA20C_SERCOM5_PAD2 = ((PIN_PA20C_SERCOM5_PAD2 shl 16) OR MUX_PA20C_SERCOM5_PAD2);
  PORT_PA20C_SERCOM5_PAD2=  (1 shl 20);
  PIN_PA25D_SERCOM5_PAD3 =  25;  // SERCOM5 signal: PAD3 on PA25 mux D */
  MUX_PA25D_SERCOM5_PAD3 =   3;
  PINMUX_PA25D_SERCOM5_PAD3 = ((PIN_PA25D_SERCOM5_PAD3 shl 16) OR MUX_PA25D_SERCOM5_PAD3);
  PORT_PA25D_SERCOM5_PAD3=  (1 shl 25);
  PIN_PB01D_SERCOM5_PAD3 =  33;  // SERCOM5 signal: PAD3 on PB01 mux D */
  MUX_PB01D_SERCOM5_PAD3 =   3;
  PINMUX_PB01D_SERCOM5_PAD3 = ((PIN_PB01D_SERCOM5_PAD3 shl 16) OR MUX_PB01D_SERCOM5_PAD3);
  PORT_PB01D_SERCOM5_PAD3=  (1 shl 1);
  PIN_PB23D_SERCOM5_PAD3 =  55;  // SERCOM5 signal: PAD3 on PB23 mux D */
  MUX_PB23D_SERCOM5_PAD3 =   3;
  PINMUX_PB23D_SERCOM5_PAD3 = ((PIN_PB23D_SERCOM5_PAD3 shl 16) OR MUX_PB23D_SERCOM5_PAD3);
  PORT_PB23D_SERCOM5_PAD3=  (1 shl 23);
  PIN_PA21C_SERCOM5_PAD3 =  21;  // SERCOM5 signal: PAD3 on PA21 mux C */
  MUX_PA21C_SERCOM5_PAD3 =   2;
  PINMUX_PA21C_SERCOM5_PAD3 = ((PIN_PA21C_SERCOM5_PAD3 shl 16) OR MUX_PA21C_SERCOM5_PAD3);
  PORT_PA21C_SERCOM5_PAD3=  (1 shl 21);
  // ========== PORT definition for TCC0 peripheral ========== */
  PIN_PA04E_TCC0_WO0  =   4;  // TCC0 signal: WO0 on PA04 mux E */
  MUX_PA04E_TCC0_WO0  =   4;
  PINMUX_PA04E_TCC0_WO0 =  ((PIN_PA04E_TCC0_WO0 shl 16) OR MUX_PA04E_TCC0_WO0);
  PORT_PA04E_TCC0_WO0=    (1 shl 4);
  PIN_PA08E_TCC0_WO0  =   8;  // TCC0 signal: WO0 on PA08 mux E */
  MUX_PA08E_TCC0_WO0  =   4;
  PINMUX_PA08E_TCC0_WO0 =  ((PIN_PA08E_TCC0_WO0 shl 16) OR MUX_PA08E_TCC0_WO0);
  PORT_PA08E_TCC0_WO0=    (1 shl 8);
  PIN_PB30E_TCC0_WO0  =  62;  // TCC0 signal: WO0 on PB30 mux E */
  MUX_PB30E_TCC0_WO0  =   4;
  PINMUX_PB30E_TCC0_WO0 =  ((PIN_PB30E_TCC0_WO0 shl 16) OR MUX_PB30E_TCC0_WO0);
  PORT_PB30E_TCC0_WO0=    (1 shl 30);
  PIN_PA05E_TCC0_WO1  =   5;  // TCC0 signal: WO1 on PA05 mux E */
  MUX_PA05E_TCC0_WO1  =   4;
  PINMUX_PA05E_TCC0_WO1 =  ((PIN_PA05E_TCC0_WO1 shl 16) OR MUX_PA05E_TCC0_WO1);
  PORT_PA05E_TCC0_WO1=    (1 shl 5);
  PIN_PA09E_TCC0_WO1  =   9;  // TCC0 signal: WO1 on PA09 mux E */
  MUX_PA09E_TCC0_WO1  =   4;
  PINMUX_PA09E_TCC0_WO1 =  ((PIN_PA09E_TCC0_WO1 shl 16) OR MUX_PA09E_TCC0_WO1);
  PORT_PA09E_TCC0_WO1=    (1 shl 9);
  PIN_PB31E_TCC0_WO1  =  63;  // TCC0 signal: WO1 on PB31 mux E */
  MUX_PB31E_TCC0_WO1  =   4;
  PINMUX_PB31E_TCC0_WO1 =  ((PIN_PB31E_TCC0_WO1 shl 16) OR MUX_PB31E_TCC0_WO1);
  PORT_PB31E_TCC0_WO1=    (1 shl 31);
  PIN_PA10F_TCC0_WO2  =  10;  // TCC0 signal: WO2 on PA10 mux F */
  MUX_PA10F_TCC0_WO2  =   5;
  PINMUX_PA10F_TCC0_WO2 =  ((PIN_PA10F_TCC0_WO2 shl 16) OR MUX_PA10F_TCC0_WO2);
  PORT_PA10F_TCC0_WO2=    (1 shl 10);
  PIN_PA18F_TCC0_WO2  =  18;  // TCC0 signal: WO2 on PA18 mux F */
  MUX_PA18F_TCC0_WO2  =   5;
  PINMUX_PA18F_TCC0_WO2 =  ((PIN_PA18F_TCC0_WO2 shl 16) OR MUX_PA18F_TCC0_WO2);
  PORT_PA18F_TCC0_WO2=    (1 shl 18);
  PIN_PA11F_TCC0_WO3  =  11;  // TCC0 signal: WO3 on PA11 mux F */
  MUX_PA11F_TCC0_WO3  =   5;
  PINMUX_PA11F_TCC0_WO3 =  ((PIN_PA11F_TCC0_WO3 shl 16) OR MUX_PA11F_TCC0_WO3);
  PORT_PA11F_TCC0_WO3=    (1 shl 11);
  PIN_PA19F_TCC0_WO3  =  19;  // TCC0 signal: WO3 on PA19 mux F */
  MUX_PA19F_TCC0_WO3  =   5;
  PINMUX_PA19F_TCC0_WO3 =  ((PIN_PA19F_TCC0_WO3 shl 16) OR MUX_PA19F_TCC0_WO3);
  PORT_PA19F_TCC0_WO3=    (1 shl 19);
  PIN_PA14F_TCC0_WO4  =  14;  // TCC0 signal: WO4 on PA14 mux F */
  MUX_PA14F_TCC0_WO4  =   5;
  PINMUX_PA14F_TCC0_WO4 =  ((PIN_PA14F_TCC0_WO4 shl 16) OR MUX_PA14F_TCC0_WO4);
  PORT_PA14F_TCC0_WO4=    (1 shl 14);
  PIN_PA22F_TCC0_WO4  =  22;  // TCC0 signal: WO4 on PA22 mux F */
  MUX_PA22F_TCC0_WO4  =   5;
  PINMUX_PA22F_TCC0_WO4 =  ((PIN_PA22F_TCC0_WO4 shl 16) OR MUX_PA22F_TCC0_WO4);
  PORT_PA22F_TCC0_WO4=    (1 shl 22);
  PIN_PB10F_TCC0_WO4  =  42;  // TCC0 signal: WO4 on PB10 mux F */
  MUX_PB10F_TCC0_WO4  =   5;
  PINMUX_PB10F_TCC0_WO4 =  ((PIN_PB10F_TCC0_WO4 shl 16) OR MUX_PB10F_TCC0_WO4);
  PORT_PB10F_TCC0_WO4=    (1 shl 10);
  PIN_PB16F_TCC0_WO4  =  48;  // TCC0 signal: WO4 on PB16 mux F */
  MUX_PB16F_TCC0_WO4  =   5;
  PINMUX_PB16F_TCC0_WO4 =  ((PIN_PB16F_TCC0_WO4 shl 16) OR MUX_PB16F_TCC0_WO4);
  PORT_PB16F_TCC0_WO4=    (1 shl 16);
  PIN_PA15F_TCC0_WO5  =  15;  // TCC0 signal: WO5 on PA15 mux F */
  MUX_PA15F_TCC0_WO5  =   5;
  PINMUX_PA15F_TCC0_WO5 =  ((PIN_PA15F_TCC0_WO5 shl 16) OR MUX_PA15F_TCC0_WO5);
  PORT_PA15F_TCC0_WO5=    (1 shl 15);
  PIN_PA23F_TCC0_WO5  =  23;  // TCC0 signal: WO5 on PA23 mux F */
  MUX_PA23F_TCC0_WO5  =   5;
  PINMUX_PA23F_TCC0_WO5 =  ((PIN_PA23F_TCC0_WO5 shl 16) OR MUX_PA23F_TCC0_WO5);
  PORT_PA23F_TCC0_WO5=    (1 shl 23);
  PIN_PB11F_TCC0_WO5  =  43;  // TCC0 signal: WO5 on PB11 mux F */
  MUX_PB11F_TCC0_WO5  =   5;
  PINMUX_PB11F_TCC0_WO5 =  ((PIN_PB11F_TCC0_WO5 shl 16) OR MUX_PB11F_TCC0_WO5);
  PORT_PB11F_TCC0_WO5=    (1 shl 11);
  PIN_PB17F_TCC0_WO5  =  49;  // TCC0 signal: WO5 on PB17 mux F */
  MUX_PB17F_TCC0_WO5  =   5;
  PINMUX_PB17F_TCC0_WO5 =  ((PIN_PB17F_TCC0_WO5 shl 16) OR MUX_PB17F_TCC0_WO5);
  PORT_PB17F_TCC0_WO5=    (1 shl 17);
  PIN_PA12F_TCC0_WO6  =  12;  // TCC0 signal: WO6 on PA12 mux F */
  MUX_PA12F_TCC0_WO6  =   5;
  PINMUX_PA12F_TCC0_WO6 =  ((PIN_PA12F_TCC0_WO6 shl 16) OR MUX_PA12F_TCC0_WO6);
  PORT_PA12F_TCC0_WO6=    (1 shl 12);
  PIN_PA20F_TCC0_WO6  =  20;  // TCC0 signal: WO6 on PA20 mux F */
  MUX_PA20F_TCC0_WO6  =   5;
  PINMUX_PA20F_TCC0_WO6 =  ((PIN_PA20F_TCC0_WO6 shl 16) OR MUX_PA20F_TCC0_WO6);
  PORT_PA20F_TCC0_WO6=    (1 shl 20);
  PIN_PB12F_TCC0_WO6  =  44;  // TCC0 signal: WO6 on PB12 mux F */
  MUX_PB12F_TCC0_WO6  =   5;
  PINMUX_PB12F_TCC0_WO6 =  ((PIN_PB12F_TCC0_WO6 shl 16) OR MUX_PB12F_TCC0_WO6);
  PORT_PB12F_TCC0_WO6=    (1 shl 12);
  PIN_PA16F_TCC0_WO6  =  16;  // TCC0 signal: WO6 on PA16 mux F */
  MUX_PA16F_TCC0_WO6  =   5;
  PINMUX_PA16F_TCC0_WO6 =  ((PIN_PA16F_TCC0_WO6 shl 16) OR MUX_PA16F_TCC0_WO6);
  PORT_PA16F_TCC0_WO6=    (1 shl 16);
  PIN_PA13F_TCC0_WO7  =  13;  // TCC0 signal: WO7 on PA13 mux F */
  MUX_PA13F_TCC0_WO7  =   5;
  PINMUX_PA13F_TCC0_WO7 =  ((PIN_PA13F_TCC0_WO7 shl 16) OR MUX_PA13F_TCC0_WO7);
  PORT_PA13F_TCC0_WO7=    (1 shl 13);
  PIN_PA21F_TCC0_WO7  =  21;  // TCC0 signal: WO7 on PA21 mux F */
  MUX_PA21F_TCC0_WO7  =   5;
  PINMUX_PA21F_TCC0_WO7 =  ((PIN_PA21F_TCC0_WO7 shl 16) OR MUX_PA21F_TCC0_WO7);
  PORT_PA21F_TCC0_WO7=    (1 shl 21);
  PIN_PB13F_TCC0_WO7  =  45;  // TCC0 signal: WO7 on PB13 mux F */
  MUX_PB13F_TCC0_WO7  =   5;
  PINMUX_PB13F_TCC0_WO7 =  ((PIN_PB13F_TCC0_WO7 shl 16) OR MUX_PB13F_TCC0_WO7);
  PORT_PB13F_TCC0_WO7=    (1 shl 13);
  PIN_PA17F_TCC0_WO7  =  17;  // TCC0 signal: WO7 on PA17 mux F */
  MUX_PA17F_TCC0_WO7  =   5;
  PINMUX_PA17F_TCC0_WO7 =  ((PIN_PA17F_TCC0_WO7 shl 16) OR MUX_PA17F_TCC0_WO7);
  PORT_PA17F_TCC0_WO7=    (1 shl 17);
  // ========== PORT definition for TCC1 peripheral ========== */
  PIN_PA06E_TCC1_WO0  =   6;  // TCC1 signal: WO0 on PA06 mux E */
  MUX_PA06E_TCC1_WO0  =   4;
  PINMUX_PA06E_TCC1_WO0 =  ((PIN_PA06E_TCC1_WO0 shl 16) OR MUX_PA06E_TCC1_WO0);
  PORT_PA06E_TCC1_WO0=    (1 shl 6);
  PIN_PA10E_TCC1_WO0  =  10;  // TCC1 signal: WO0 on PA10 mux E */
  MUX_PA10E_TCC1_WO0  =   4;
  PINMUX_PA10E_TCC1_WO0 =  ((PIN_PA10E_TCC1_WO0 shl 16) OR MUX_PA10E_TCC1_WO0);
  PORT_PA10E_TCC1_WO0=    (1 shl 10);
  PIN_PA30E_TCC1_WO0  =  30;  // TCC1 signal: WO0 on PA30 mux E */
  MUX_PA30E_TCC1_WO0  =   4;
  PINMUX_PA30E_TCC1_WO0 =  ((PIN_PA30E_TCC1_WO0 shl 16) OR MUX_PA30E_TCC1_WO0);
  PORT_PA30E_TCC1_WO0=    (1 shl 30);
  PIN_PA07E_TCC1_WO1  =   7;  // TCC1 signal: WO1 on PA07 mux E */
  MUX_PA07E_TCC1_WO1  =   4;
  PINMUX_PA07E_TCC1_WO1 =  ((PIN_PA07E_TCC1_WO1 shl 16) OR MUX_PA07E_TCC1_WO1);
  PORT_PA07E_TCC1_WO1=    (1 shl 7);
  PIN_PA11E_TCC1_WO1  =  11;  // TCC1 signal: WO1 on PA11 mux E */
  MUX_PA11E_TCC1_WO1  =   4;
  PINMUX_PA11E_TCC1_WO1 =  ((PIN_PA11E_TCC1_WO1 shl 16) OR MUX_PA11E_TCC1_WO1);
  PORT_PA11E_TCC1_WO1=    (1 shl 11);
  PIN_PA31E_TCC1_WO1  =  31;  // TCC1 signal: WO1 on PA31 mux E */
  MUX_PA31E_TCC1_WO1  =   4;
  PINMUX_PA31E_TCC1_WO1 =  ((PIN_PA31E_TCC1_WO1 shl 16) OR MUX_PA31E_TCC1_WO1);
  PORT_PA31E_TCC1_WO1=    (1 shl 31);
  PIN_PA08F_TCC1_WO2  =   8;  // TCC1 signal: WO2 on PA08 mux F */
  MUX_PA08F_TCC1_WO2  =   5;
  PINMUX_PA08F_TCC1_WO2 =  ((PIN_PA08F_TCC1_WO2 shl 16) OR MUX_PA08F_TCC1_WO2);
  PORT_PA08F_TCC1_WO2=    (1 shl 8);
  PIN_PA24F_TCC1_WO2  =  24;  // TCC1 signal: WO2 on PA24 mux F */
  MUX_PA24F_TCC1_WO2  =   5;
  PINMUX_PA24F_TCC1_WO2 =  ((PIN_PA24F_TCC1_WO2 shl 16) OR MUX_PA24F_TCC1_WO2);
  PORT_PA24F_TCC1_WO2=    (1 shl 24);
  PIN_PB30F_TCC1_WO2  =  62;  // TCC1 signal: WO2 on PB30 mux F */
  MUX_PB30F_TCC1_WO2  =   5;
  PINMUX_PB30F_TCC1_WO2 =  ((PIN_PB30F_TCC1_WO2 shl 16) OR MUX_PB30F_TCC1_WO2);
  PORT_PB30F_TCC1_WO2=    (1 shl 30);
  PIN_PA09F_TCC1_WO3  =   9;  // TCC1 signal: WO3 on PA09 mux F */
  MUX_PA09F_TCC1_WO3  =   5;
  PINMUX_PA09F_TCC1_WO3 =  ((PIN_PA09F_TCC1_WO3 shl 16) OR MUX_PA09F_TCC1_WO3);
  PORT_PA09F_TCC1_WO3=    (1 shl 9);
  PIN_PA25F_TCC1_WO3  =  25;  // TCC1 signal: WO3 on PA25 mux F */
  MUX_PA25F_TCC1_WO3  =   5;
  PINMUX_PA25F_TCC1_WO3 =  ((PIN_PA25F_TCC1_WO3 shl 16) OR MUX_PA25F_TCC1_WO3);
  PORT_PA25F_TCC1_WO3=    (1 shl 25);
  PIN_PB31F_TCC1_WO3  =  63;  // TCC1 signal: WO3 on PB31 mux F */
  MUX_PB31F_TCC1_WO3  =   5;
  PINMUX_PB31F_TCC1_WO3 =  ((PIN_PB31F_TCC1_WO3 shl 16) OR MUX_PB31F_TCC1_WO3);
  PORT_PB31F_TCC1_WO3=    (1 shl 31);
  // ========== PORT definition for TCC2 peripheral ========== */
  PIN_PA12E_TCC2_WO0  =  12;  // TCC2 signal: WO0 on PA12 mux E */
  MUX_PA12E_TCC2_WO0  =   4;
  PINMUX_PA12E_TCC2_WO0 =  ((PIN_PA12E_TCC2_WO0 shl 16) OR MUX_PA12E_TCC2_WO0);
  PORT_PA12E_TCC2_WO0=    (1 shl 12);
  PIN_PA16E_TCC2_WO0  =  16;  // TCC2 signal: WO0 on PA16 mux E */
  MUX_PA16E_TCC2_WO0  =   4;
  PINMUX_PA16E_TCC2_WO0 =  ((PIN_PA16E_TCC2_WO0 shl 16) OR MUX_PA16E_TCC2_WO0);
  PORT_PA16E_TCC2_WO0=    (1 shl 16);
  PIN_PA00E_TCC2_WO0  =   0;  // TCC2 signal: WO0 on PA00 mux E */
  MUX_PA00E_TCC2_WO0  =   4;
  PINMUX_PA00E_TCC2_WO0 =  ((PIN_PA00E_TCC2_WO0 shl 16) OR MUX_PA00E_TCC2_WO0);
  PORT_PA00E_TCC2_WO0=    (1 shl 0);
  PIN_PA13E_TCC2_WO1  =  13;  // TCC2 signal: WO1 on PA13 mux E */
  MUX_PA13E_TCC2_WO1  =   4;
  PINMUX_PA13E_TCC2_WO1 =  ((PIN_PA13E_TCC2_WO1 shl 16) OR MUX_PA13E_TCC2_WO1);
  PORT_PA13E_TCC2_WO1=    (1 shl 13);
  PIN_PA17E_TCC2_WO1  =  17;  // TCC2 signal: WO1 on PA17 mux E */
  MUX_PA17E_TCC2_WO1  =   4;
  PINMUX_PA17E_TCC2_WO1 =  ((PIN_PA17E_TCC2_WO1 shl 16) OR MUX_PA17E_TCC2_WO1);
  PORT_PA17E_TCC2_WO1=    (1 shl 17);
  PIN_PA01E_TCC2_WO1  =   1;  // TCC2 signal: WO1 on PA01 mux E */
  MUX_PA01E_TCC2_WO1  =   4;
  PINMUX_PA01E_TCC2_WO1 =  ((PIN_PA01E_TCC2_WO1 shl 16) OR MUX_PA01E_TCC2_WO1);
  PORT_PA01E_TCC2_WO1=    (1 shl 1);
  // ========== PORT definition for TC3 peripheral ========== */
  PIN_PA18E_TC3_WO0  =   18;  // TC3 signal: WO0 on PA18 mux E */
  MUX_PA18E_TC3_WO0  =  4;
  PINMUX_PA18E_TC3_WO0 =  ((PIN_PA18E_TC3_WO0 shl 16) OR MUX_PA18E_TC3_WO0);
  PORT_PA18E_TC3_WO0 = (1 shl 18);
  PIN_PA14E_TC3_WO0  =   14;  // TC3 signal: WO0 on PA14 mux E */
  MUX_PA14E_TC3_WO0  =  4;
  PINMUX_PA14E_TC3_WO0 =  ((PIN_PA14E_TC3_WO0 shl 16) OR MUX_PA14E_TC3_WO0);
  PORT_PA14E_TC3_WO0 = (1 shl 14);
  PIN_PA19E_TC3_WO1  =   19;  // TC3 signal: WO1 on PA19 mux E */
  MUX_PA19E_TC3_WO1  =  4;
  PINMUX_PA19E_TC3_WO1 =  ((PIN_PA19E_TC3_WO1 shl 16) OR MUX_PA19E_TC3_WO1);
  PORT_PA19E_TC3_WO1 = (1 shl 19);
  PIN_PA15E_TC3_WO1  =   15;  // TC3 signal: WO1 on PA15 mux E */
  MUX_PA15E_TC3_WO1  =  4;
  PINMUX_PA15E_TC3_WO1 =  ((PIN_PA15E_TC3_WO1 shl 16) OR MUX_PA15E_TC3_WO1);
  PORT_PA15E_TC3_WO1 = (1 shl 15);
  // ========== PORT definition for TC4 peripheral ========== */
  PIN_PA22E_TC4_WO0  =   22;  // TC4 signal: WO0 on PA22 mux E */
  MUX_PA22E_TC4_WO0  =  4;
  PINMUX_PA22E_TC4_WO0 =  ((PIN_PA22E_TC4_WO0 shl 16) OR MUX_PA22E_TC4_WO0);
  PORT_PA22E_TC4_WO0 = (1 shl 22);
  PIN_PB08E_TC4_WO0  =   40;  // TC4 signal: WO0 on PB08 mux E */
  MUX_PB08E_TC4_WO0  =  4;
  PINMUX_PB08E_TC4_WO0 =  ((PIN_PB08E_TC4_WO0 shl 16) OR MUX_PB08E_TC4_WO0);
  PORT_PB08E_TC4_WO0 = (1 shl 8);
  PIN_PB12E_TC4_WO0  =   44;  // TC4 signal: WO0 on PB12 mux E */
  MUX_PB12E_TC4_WO0  =  4;
  PINMUX_PB12E_TC4_WO0 =  ((PIN_PB12E_TC4_WO0 shl 16) OR MUX_PB12E_TC4_WO0);
  PORT_PB12E_TC4_WO0 = (1 shl 12);
  PIN_PA23E_TC4_WO1  =   23;  // TC4 signal: WO1 on PA23 mux E */
  MUX_PA23E_TC4_WO1  =  4;
  PINMUX_PA23E_TC4_WO1 =  ((PIN_PA23E_TC4_WO1 shl 16) OR MUX_PA23E_TC4_WO1);
  PORT_PA23E_TC4_WO1 = (1 shl 23);
  PIN_PB09E_TC4_WO1  =   41;  // TC4 signal: WO1 on PB09 mux E */
  MUX_PB09E_TC4_WO1  =  4;
  PINMUX_PB09E_TC4_WO1 =  ((PIN_PB09E_TC4_WO1 shl 16) OR MUX_PB09E_TC4_WO1);
  PORT_PB09E_TC4_WO1 = (1 shl 9);
  PIN_PB13E_TC4_WO1  =   45;  // TC4 signal: WO1 on PB13 mux E */
  MUX_PB13E_TC4_WO1  =  4;
  PINMUX_PB13E_TC4_WO1 =  ((PIN_PB13E_TC4_WO1 shl 16) OR MUX_PB13E_TC4_WO1);
  PORT_PB13E_TC4_WO1 = (1 shl 13);
  // ========== PORT definition for TC5 peripheral ========== */
  PIN_PA24E_TC5_WO0  =   24;  // TC5 signal: WO0 on PA24 mux E */
  MUX_PA24E_TC5_WO0  =  4;
  PINMUX_PA24E_TC5_WO0 =  ((PIN_PA24E_TC5_WO0 shl 16) OR MUX_PA24E_TC5_WO0);
  PORT_PA24E_TC5_WO0 = (1 shl 24);
  PIN_PB10E_TC5_WO0  =   42;  // TC5 signal: WO0 on PB10 mux E */
  MUX_PB10E_TC5_WO0  =  4;
  PINMUX_PB10E_TC5_WO0 =  ((PIN_PB10E_TC5_WO0 shl 16) OR MUX_PB10E_TC5_WO0);
  PORT_PB10E_TC5_WO0 = (1 shl 10);
  PIN_PB14E_TC5_WO0  =   46;  // TC5 signal: WO0 on PB14 mux E */
  MUX_PB14E_TC5_WO0  =  4;
  PINMUX_PB14E_TC5_WO0 =  ((PIN_PB14E_TC5_WO0 shl 16) OR MUX_PB14E_TC5_WO0);
  PORT_PB14E_TC5_WO0 = (1 shl 14);
  PIN_PA25E_TC5_WO1  =   25;  // TC5 signal: WO1 on PA25 mux E */
  MUX_PA25E_TC5_WO1  =  4;
  PINMUX_PA25E_TC5_WO1 =  ((PIN_PA25E_TC5_WO1 shl 16) OR MUX_PA25E_TC5_WO1);
  PORT_PA25E_TC5_WO1 = (1 shl 25);
  PIN_PB11E_TC5_WO1  =   43;  // TC5 signal: WO1 on PB11 mux E */
  MUX_PB11E_TC5_WO1  =  4;
  PINMUX_PB11E_TC5_WO1 =  ((PIN_PB11E_TC5_WO1 shl 16) OR MUX_PB11E_TC5_WO1);
  PORT_PB11E_TC5_WO1 = (1 shl 11);
  PIN_PB15E_TC5_WO1  =   47;  // TC5 signal: WO1 on PB15 mux E */
  MUX_PB15E_TC5_WO1  =  4;
  PINMUX_PB15E_TC5_WO1 =  ((PIN_PB15E_TC5_WO1 shl 16) OR MUX_PB15E_TC5_WO1);
  PORT_PB15E_TC5_WO1 = (1 shl 15);
  // ========== PORT definition for TC6 peripheral ========== */
  PIN_PB02E_TC6_WO0  =   34;  // TC6 signal: WO0 on PB02 mux E */
  MUX_PB02E_TC6_WO0  =  4;
  PINMUX_PB02E_TC6_WO0 =  ((PIN_PB02E_TC6_WO0 shl 16) OR MUX_PB02E_TC6_WO0);
  PORT_PB02E_TC6_WO0 = (1 shl 2);
  PIN_PB16E_TC6_WO0  =   48;  // TC6 signal: WO0 on PB16 mux E */
  MUX_PB16E_TC6_WO0  =  4;
  PINMUX_PB16E_TC6_WO0 =  ((PIN_PB16E_TC6_WO0 shl 16) OR MUX_PB16E_TC6_WO0);
  PORT_PB16E_TC6_WO0 = (1 shl 16);
  PIN_PB03E_TC6_WO1  =   35;  // TC6 signal: WO1 on PB03 mux E */
  MUX_PB03E_TC6_WO1  =  4;
  PINMUX_PB03E_TC6_WO1 =  ((PIN_PB03E_TC6_WO1 shl 16) OR MUX_PB03E_TC6_WO1);
  PORT_PB03E_TC6_WO1 = (1 shl 3);
  PIN_PB17E_TC6_WO1  =   49;  // TC6 signal: WO1 on PB17 mux E */
  MUX_PB17E_TC6_WO1  =  4;
  PINMUX_PB17E_TC6_WO1 =  ((PIN_PB17E_TC6_WO1 shl 16) OR MUX_PB17E_TC6_WO1);
  PORT_PB17E_TC6_WO1 = (1 shl 17);
  // ========== PORT definition for TC7 peripheral ========== */
  PIN_PA20E_TC7_WO0  =   20;  // TC7 signal: WO0 on PA20 mux E */
  MUX_PA20E_TC7_WO0  =  4;
  PINMUX_PA20E_TC7_WO0 =  ((PIN_PA20E_TC7_WO0 shl 16) OR MUX_PA20E_TC7_WO0);
  PORT_PA20E_TC7_WO0 = (1 shl 20);
  PIN_PB00E_TC7_WO0  =   32;  // TC7 signal: WO0 on PB00 mux E */
  MUX_PB00E_TC7_WO0  =  4;
  PINMUX_PB00E_TC7_WO0 =  ((PIN_PB00E_TC7_WO0 shl 16) OR MUX_PB00E_TC7_WO0);
  PORT_PB00E_TC7_WO0 = (1 shl 0);
  PIN_PB22E_TC7_WO0  =   54;  // TC7 signal: WO0 on PB22 mux E */
  MUX_PB22E_TC7_WO0  =  4;
  PINMUX_PB22E_TC7_WO0 =  ((PIN_PB22E_TC7_WO0 shl 16) OR MUX_PB22E_TC7_WO0);
  PORT_PB22E_TC7_WO0 = (1 shl 22);
  PIN_PA21E_TC7_WO1  =   21;  // TC7 signal: WO1 on PA21 mux E */
  MUX_PA21E_TC7_WO1  =  4;
  PINMUX_PA21E_TC7_WO1 =  ((PIN_PA21E_TC7_WO1 shl 16) OR MUX_PA21E_TC7_WO1);
  PORT_PA21E_TC7_WO1 = (1 shl 21);
  PIN_PB01E_TC7_WO1  =   33;  // TC7 signal: WO1 on PB01 mux E */
  MUX_PB01E_TC7_WO1  =  4;
  PINMUX_PB01E_TC7_WO1 =  ((PIN_PB01E_TC7_WO1 shl 16) OR MUX_PB01E_TC7_WO1);
  PORT_PB01E_TC7_WO1 = (1 shl 1);
  PIN_PB23E_TC7_WO1  =   55;  // TC7 signal: WO1 on PB23 mux E */
  MUX_PB23E_TC7_WO1  =  4;
  PINMUX_PB23E_TC7_WO1 =  ((PIN_PB23E_TC7_WO1 shl 16) OR MUX_PB23E_TC7_WO1);
  PORT_PB23E_TC7_WO1 = (1 shl 23);
  // ========== PORT definition for ADC peripheral ========== */
  PIN_PA02B_ADC_AIN0  =   2;  // ADC signal: AIN0 on PA02 mux B */
  MUX_PA02B_ADC_AIN0  =   1;
  PINMUX_PA02B_ADC_AIN0 =  ((PIN_PA02B_ADC_AIN0 shl 16) OR MUX_PA02B_ADC_AIN0);
  PORT_PA02B_ADC_AIN0=    (1 shl 2);
  PIN_PA03B_ADC_AIN1  =   3;  // ADC signal: AIN1 on PA03 mux B */
  MUX_PA03B_ADC_AIN1  =   1;
  PINMUX_PA03B_ADC_AIN1 =  ((PIN_PA03B_ADC_AIN1 shl 16) OR MUX_PA03B_ADC_AIN1);
  PORT_PA03B_ADC_AIN1=    (1 shl 3);
  PIN_PB08B_ADC_AIN2  =  40;  // ADC signal: AIN2 on PB08 mux B */
  MUX_PB08B_ADC_AIN2  =   1;
  PINMUX_PB08B_ADC_AIN2 =  ((PIN_PB08B_ADC_AIN2 shl 16) OR MUX_PB08B_ADC_AIN2);
  PORT_PB08B_ADC_AIN2=    (1 shl 8);
  PIN_PB09B_ADC_AIN3  =  41;  // ADC signal: AIN3 on PB09 mux B */
  MUX_PB09B_ADC_AIN3  =   1;
  PINMUX_PB09B_ADC_AIN3 =  ((PIN_PB09B_ADC_AIN3 shl 16) OR MUX_PB09B_ADC_AIN3);
  PORT_PB09B_ADC_AIN3=    (1 shl 9);
  PIN_PA04B_ADC_AIN4  =   4;  // ADC signal: AIN4 on PA04 mux B */
  MUX_PA04B_ADC_AIN4  =   1;
  PINMUX_PA04B_ADC_AIN4 =  ((PIN_PA04B_ADC_AIN4 shl 16) OR MUX_PA04B_ADC_AIN4);
  PORT_PA04B_ADC_AIN4=    (1 shl 4);
  PIN_PA05B_ADC_AIN5  =   5;  // ADC signal: AIN5 on PA05 mux B */
  MUX_PA05B_ADC_AIN5  =   1;
  PINMUX_PA05B_ADC_AIN5 =  ((PIN_PA05B_ADC_AIN5 shl 16) OR MUX_PA05B_ADC_AIN5);
  PORT_PA05B_ADC_AIN5=    (1 shl 5);
  PIN_PA06B_ADC_AIN6  =   6;  // ADC signal: AIN6 on PA06 mux B */
  MUX_PA06B_ADC_AIN6  =   1;
  PINMUX_PA06B_ADC_AIN6 =  ((PIN_PA06B_ADC_AIN6 shl 16) OR MUX_PA06B_ADC_AIN6);
  PORT_PA06B_ADC_AIN6=    (1 shl 6);
  PIN_PA07B_ADC_AIN7  =   7;  // ADC signal: AIN7 on PA07 mux B */
  MUX_PA07B_ADC_AIN7  =   1;
  PINMUX_PA07B_ADC_AIN7 =  ((PIN_PA07B_ADC_AIN7 shl 16) OR MUX_PA07B_ADC_AIN7);
  PORT_PA07B_ADC_AIN7=    (1 shl 7);
  PIN_PB00B_ADC_AIN8  =  32;  // ADC signal: AIN8 on PB00 mux B */
  MUX_PB00B_ADC_AIN8  =   1;
  PINMUX_PB00B_ADC_AIN8 =  ((PIN_PB00B_ADC_AIN8 shl 16) OR MUX_PB00B_ADC_AIN8);
  PORT_PB00B_ADC_AIN8=    (1 shl 0);
  PIN_PB01B_ADC_AIN9  =  33;  // ADC signal: AIN9 on PB01 mux B */
  MUX_PB01B_ADC_AIN9  =   1;
  PINMUX_PB01B_ADC_AIN9 =  ((PIN_PB01B_ADC_AIN9 shl 16) OR MUX_PB01B_ADC_AIN9);
  PORT_PB01B_ADC_AIN9=    (1 shl 1);
  PIN_PB02B_ADC_AIN10  = 34;  // ADC signal: AIN10 on PB02 mux B */
  MUX_PB02B_ADC_AIN10  =  1;
  PINMUX_PB02B_ADC_AIN10 =  ((PIN_PB02B_ADC_AIN10 shl 16) OR MUX_PB02B_ADC_AIN10);
  PORT_PB02B_ADC_AIN10=   (1 shl 2);
  PIN_PB03B_ADC_AIN11  = 35;  // ADC signal: AIN11 on PB03 mux B */
  MUX_PB03B_ADC_AIN11  =  1;
  PINMUX_PB03B_ADC_AIN11 =  ((PIN_PB03B_ADC_AIN11 shl 16) OR MUX_PB03B_ADC_AIN11);
  PORT_PB03B_ADC_AIN11=   (1 shl 3);
  PIN_PB04B_ADC_AIN12  = 36;  // ADC signal: AIN12 on PB04 mux B */
  MUX_PB04B_ADC_AIN12  =  1;
  PINMUX_PB04B_ADC_AIN12 =  ((PIN_PB04B_ADC_AIN12 shl 16) OR MUX_PB04B_ADC_AIN12);
  PORT_PB04B_ADC_AIN12=   (1 shl 4);
  PIN_PB05B_ADC_AIN13  = 37;  // ADC signal: AIN13 on PB05 mux B */
  MUX_PB05B_ADC_AIN13  =  1;
  PINMUX_PB05B_ADC_AIN13 =  ((PIN_PB05B_ADC_AIN13 shl 16) OR MUX_PB05B_ADC_AIN13);
  PORT_PB05B_ADC_AIN13=   (1 shl 5);
  PIN_PB06B_ADC_AIN14  = 38;  // ADC signal: AIN14 on PB06 mux B */
  MUX_PB06B_ADC_AIN14  =  1;
  PINMUX_PB06B_ADC_AIN14 =  ((PIN_PB06B_ADC_AIN14 shl 16) OR MUX_PB06B_ADC_AIN14);
  PORT_PB06B_ADC_AIN14=   (1 shl 6);
  PIN_PB07B_ADC_AIN15  = 39;  // ADC signal: AIN15 on PB07 mux B */
  MUX_PB07B_ADC_AIN15  =  1;
  PINMUX_PB07B_ADC_AIN15 =  ((PIN_PB07B_ADC_AIN15 shl 16) OR MUX_PB07B_ADC_AIN15);
  PORT_PB07B_ADC_AIN15=   (1 shl 7);
  PIN_PA08B_ADC_AIN16  =  8;  // ADC signal: AIN16 on PA08 mux B */
  MUX_PA08B_ADC_AIN16  =  1;
  PINMUX_PA08B_ADC_AIN16 =  ((PIN_PA08B_ADC_AIN16 shl 16) OR MUX_PA08B_ADC_AIN16);
  PORT_PA08B_ADC_AIN16=   (1 shl 8);
  PIN_PA09B_ADC_AIN17  =  9;  // ADC signal: AIN17 on PA09 mux B */
  MUX_PA09B_ADC_AIN17  =  1;
  PINMUX_PA09B_ADC_AIN17 =  ((PIN_PA09B_ADC_AIN17 shl 16) OR MUX_PA09B_ADC_AIN17);
  PORT_PA09B_ADC_AIN17=   (1 shl 9);
  PIN_PA10B_ADC_AIN18  = 10;  // ADC signal: AIN18 on PA10 mux B */
  MUX_PA10B_ADC_AIN18  =  1;
  PINMUX_PA10B_ADC_AIN18 =  ((PIN_PA10B_ADC_AIN18 shl 16) OR MUX_PA10B_ADC_AIN18);
  PORT_PA10B_ADC_AIN18=   (1 shl 10);
  PIN_PA11B_ADC_AIN19  = 11;  // ADC signal: AIN19 on PA11 mux B */
  MUX_PA11B_ADC_AIN19  =  1;
  PINMUX_PA11B_ADC_AIN19 =  ((PIN_PA11B_ADC_AIN19 shl 16) OR MUX_PA11B_ADC_AIN19);
  PORT_PA11B_ADC_AIN19=   (1 shl 11);
  PIN_PA04B_ADC_VREFP  =  4;  // ADC signal: VREFP on PA04 mux B */
  MUX_PA04B_ADC_VREFP  =  1;
  PINMUX_PA04B_ADC_VREFP =  ((PIN_PA04B_ADC_VREFP shl 16) OR MUX_PA04B_ADC_VREFP);
  PORT_PA04B_ADC_VREFP=   (1 shl 4);
  // ========== PORT definition for AC peripheral ========== */
  PIN_PA04B_AC_AIN0  =  4;  // AC signal: AIN0 on PA04 mux B */
  MUX_PA04B_AC_AIN0  =  1;
  PINMUX_PA04B_AC_AIN0 =  ((PIN_PA04B_AC_AIN0 shl 16) OR MUX_PA04B_AC_AIN0);
  PORT_PA04B_AC_AIN0 = (1 shl 4);
  PIN_PA05B_AC_AIN1  =  5;  // AC signal: AIN1 on PA05 mux B */
  MUX_PA05B_AC_AIN1  =  1;
  PINMUX_PA05B_AC_AIN1 =  ((PIN_PA05B_AC_AIN1 shl 16) OR MUX_PA05B_AC_AIN1);
  PORT_PA05B_AC_AIN1 = (1 shl 5);
  PIN_PA06B_AC_AIN2  =  6;  // AC signal: AIN2 on PA06 mux B */
  MUX_PA06B_AC_AIN2  =  1;
  PINMUX_PA06B_AC_AIN2 =  ((PIN_PA06B_AC_AIN2 shl 16) OR MUX_PA06B_AC_AIN2);
  PORT_PA06B_AC_AIN2 = (1 shl 6);
  PIN_PA07B_AC_AIN3  =  7;  // AC signal: AIN3 on PA07 mux B */
  MUX_PA07B_AC_AIN3  =  1;
  PINMUX_PA07B_AC_AIN3 =  ((PIN_PA07B_AC_AIN3 shl 16) OR MUX_PA07B_AC_AIN3);
  PORT_PA07B_AC_AIN3 = (1 shl 7);
  PIN_PA12H_AC_CMP0  =   12;  // AC signal: CMP0 on PA12 mux H */
  MUX_PA12H_AC_CMP0  =  7;
  PINMUX_PA12H_AC_CMP0 =  ((PIN_PA12H_AC_CMP0 shl 16) OR MUX_PA12H_AC_CMP0);
  PORT_PA12H_AC_CMP0 = (1 shl 12);
  PIN_PA18H_AC_CMP0  =   18;  // AC signal: CMP0 on PA18 mux H */
  MUX_PA18H_AC_CMP0  =  7;
  PINMUX_PA18H_AC_CMP0 =  ((PIN_PA18H_AC_CMP0 shl 16) OR MUX_PA18H_AC_CMP0);
  PORT_PA18H_AC_CMP0 = (1 shl 18);
  PIN_PA13H_AC_CMP1  =   13;  // AC signal: CMP1 on PA13 mux H */
  MUX_PA13H_AC_CMP1  =  7;
  PINMUX_PA13H_AC_CMP1 =  ((PIN_PA13H_AC_CMP1 shl 16) OR MUX_PA13H_AC_CMP1);
  PORT_PA13H_AC_CMP1 = (1 shl 13);
  PIN_PA19H_AC_CMP1  =   19;  // AC signal: CMP1 on PA19 mux H */
  MUX_PA19H_AC_CMP1  =  7;
  PINMUX_PA19H_AC_CMP1 =  ((PIN_PA19H_AC_CMP1 shl 16) OR MUX_PA19H_AC_CMP1);
  PORT_PA19H_AC_CMP1 = (1 shl 19);
  // ========== PORT definition for DAC peripheral ========== */
  PIN_PA02B_DAC_VOUT  =   2;  // DAC signal: VOUT on PA02 mux B */
  MUX_PA02B_DAC_VOUT  =   1;
  PINMUX_PA02B_DAC_VOUT =  ((PIN_PA02B_DAC_VOUT shl 16) OR MUX_PA02B_DAC_VOUT);
  PORT_PA02B_DAC_VOUT=    (1 shl 2);
  PIN_PA03B_DAC_VREFP  =  3;  // DAC signal: VREFP on PA03 mux B */
  MUX_PA03B_DAC_VREFP  =  1;
  PINMUX_PA03B_DAC_VREFP =  ((PIN_PA03B_DAC_VREFP shl 16) OR MUX_PA03B_DAC_VREFP);
  PORT_PA03B_DAC_VREFP=   (1 shl 3);
  // ========== PORT definition for I2S peripheral ========== */
  PIN_PA11G_I2S_FS0  =   11;  // I2S signal: FS0 on PA11 mux G */
  MUX_PA11G_I2S_FS0  =  6;
  PINMUX_PA11G_I2S_FS0 =  ((PIN_PA11G_I2S_FS0 shl 16) OR MUX_PA11G_I2S_FS0);
  PORT_PA11G_I2S_FS0 = (1 shl 11);
  PIN_PA21G_I2S_FS0  =   21;  // I2S signal: FS0 on PA21 mux G */
  MUX_PA21G_I2S_FS0  =  6;
  PINMUX_PA21G_I2S_FS0 =  ((PIN_PA21G_I2S_FS0 shl 16) OR MUX_PA21G_I2S_FS0);
  PORT_PA21G_I2S_FS0 = (1 shl 21);
  PIN_PB12G_I2S_FS1  =   44;  // I2S signal: FS1 on PB12 mux G */
  MUX_PB12G_I2S_FS1  =  6;
  PINMUX_PB12G_I2S_FS1 =  ((PIN_PB12G_I2S_FS1 shl 16) OR MUX_PB12G_I2S_FS1);
  PORT_PB12G_I2S_FS1 = (1 shl 12);
  PIN_PA09G_I2S_MCK0  =   9;  // I2S signal: MCK0 on PA09 mux G */
  MUX_PA09G_I2S_MCK0  =   6;
  PINMUX_PA09G_I2S_MCK0 =  ((PIN_PA09G_I2S_MCK0 shl 16) OR MUX_PA09G_I2S_MCK0);
  PORT_PA09G_I2S_MCK0=    (1 shl 9);
  PIN_PB17G_I2S_MCK0  =  49;  // I2S signal: MCK0 on PB17 mux G */
  MUX_PB17G_I2S_MCK0  =   6;
  PINMUX_PB17G_I2S_MCK0 =  ((PIN_PB17G_I2S_MCK0 shl 16) OR MUX_PB17G_I2S_MCK0);
  PORT_PB17G_I2S_MCK0=    (1 shl 17);
  PIN_PB10G_I2S_MCK1  =  42;  // I2S signal: MCK1 on PB10 mux G */
  MUX_PB10G_I2S_MCK1  =   6;
  PINMUX_PB10G_I2S_MCK1 =  ((PIN_PB10G_I2S_MCK1 shl 16) OR MUX_PB10G_I2S_MCK1);
  PORT_PB10G_I2S_MCK1=    (1 shl 10);
  PIN_PA10G_I2S_SCK0  =  10;  // I2S signal: SCK0 on PA10 mux G */
  MUX_PA10G_I2S_SCK0  =   6;
  PINMUX_PA10G_I2S_SCK0 =  ((PIN_PA10G_I2S_SCK0 shl 16) OR MUX_PA10G_I2S_SCK0);
  PORT_PA10G_I2S_SCK0=    (1 shl 10);
  PIN_PA20G_I2S_SCK0  =  20;  // I2S signal: SCK0 on PA20 mux G */
  MUX_PA20G_I2S_SCK0  =   6;
  PINMUX_PA20G_I2S_SCK0 =  ((PIN_PA20G_I2S_SCK0 shl 16) OR MUX_PA20G_I2S_SCK0);
  PORT_PA20G_I2S_SCK0=    (1 shl 20);
  PIN_PB11G_I2S_SCK1  =  43;  // I2S signal: SCK1 on PB11 mux G */
  MUX_PB11G_I2S_SCK1  =   6;
  PINMUX_PB11G_I2S_SCK1 =  ((PIN_PB11G_I2S_SCK1 shl 16) OR MUX_PB11G_I2S_SCK1);
  PORT_PB11G_I2S_SCK1=    (1 shl 11);
  PIN_PA07G_I2S_SD0  =  7;  // I2S signal: SD0 on PA07 mux G */
  MUX_PA07G_I2S_SD0  =  6;
  PINMUX_PA07G_I2S_SD0 =  ((PIN_PA07G_I2S_SD0 shl 16) OR MUX_PA07G_I2S_SD0);
  PORT_PA07G_I2S_SD0 = (1 shl 7);
  PIN_PA19G_I2S_SD0  =   19;  // I2S signal: SD0 on PA19 mux G */
  MUX_PA19G_I2S_SD0  =  6;
  PINMUX_PA19G_I2S_SD0 =  ((PIN_PA19G_I2S_SD0 shl 16) OR MUX_PA19G_I2S_SD0);
  PORT_PA19G_I2S_SD0 = (1 shl 19);
  PIN_PA08G_I2S_SD1  =  8;  // I2S signal: SD1 on PA08 mux G */
  MUX_PA08G_I2S_SD1  =  6;
  PINMUX_PA08G_I2S_SD1 =  ((PIN_PA08G_I2S_SD1 shl 16) OR MUX_PA08G_I2S_SD1);
  PORT_PA08G_I2S_SD1 = (1 shl 8);
  PIN_PB16G_I2S_SD1  =   48;  // I2S signal: SD1 on PB16 mux G */
  MUX_PB16G_I2S_SD1  =  6;
  PINMUX_PB16G_I2S_SD1 =  ((PIN_PB16G_I2S_SD1 shl 16) OR MUX_PB16G_I2S_SD1);
  PORT_PB16G_I2S_SD1 = (1 shl 16);
  {$endif samd21}

