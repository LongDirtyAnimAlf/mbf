//* ========== Instance parameters for SYSCTRL peripheral ========== */
const
  SYSCTRL_BGAP_CALIB_MSB     = 11;
  SYSCTRL_BOD12_CALIB_MSB    = 4;
  SYSCTRL_BOD33_CALIB_MSB    = 5;
  SYSCTRL_DFLL48M_COARSE_MSB = 5;
  SYSCTRL_DFLL48M_FINE_MSB   = 9;
  SYSCTRL_GCLK_ID_DFLL48     = 0;        // Index of Generic Clock for DFLL48
  SYSCTRL_GCLK_ID_FDPLL      = 1;        // Index of Generic Clock for DPLL
  SYSCTRL_GCLK_ID_FDPLL32K   = 2;        // Index of Generic Clock for DPLL 32K
  SYSCTRL_OSC32K_COARSE_CALIB_MSB = 6;
  SYSCTRL_POR33_ENTEST_MSB   = 1;
  SYSCTRL_ULPVREF_DIVLEV_MSB = 3;
  SYSCTRL_ULPVREG_FORCEGAIN_MSB = 1;
  SYSCTRL_ULPVREG_RAMREFSEL_MSB = 2;
  SYSCTRL_VREF_CONTROL_MSB   = 48;
  SYSCTRL_VREF_STATUS_MSB    = 7;
  SYSCTRL_VREG_LEVEL_MSB     = 2;
  SYSCTRL_BOD12_VERSION      = $111;
  SYSCTRL_BOD33_VERSION      = $111;
  SYSCTRL_DFLL48M_VERSION    = $300;
  SYSCTRL_FDPLL_VERSION      = $110;
  SYSCTRL_OSCULP32K_VERSION  = $111;
  SYSCTRL_OSC8M_VERSION      = $120;
  SYSCTRL_OSC32K_VERSION     = $110;
  SYSCTRL_VREF_VERSION       = $201;
  SYSCTRL_VREG_VERSION       = $201;
  SYSCTRL_XOSC_VERSION       = $112;
  SYSCTRL_XOSC32K_VERSION    = $111;

  SYSCTRL_OSC8M_PRESC_Pos    = 8;            // \brief (SYSCTRL_OSC8M) Oscillator Prescaler */
  SYSCTRL_OSC8M_PRESC_Msk    = ($03 shl SYSCTRL_OSC8M_PRESC_Pos);

  SYSCTRL_OSC8M_OFFSET       = $20;          // \brief (SYSCTRL_OSC8M offset) 8MHz Internal Oscillator (OSC8M) Control */
  SYSCTRL_OSC8M_RESETVALUE   = $87070382;    // \brief (SYSCTRL_OSC8M reset_value) 8MHz Internal Oscillator (OSC8M) Control */

  SYSCTRL_OSC8M_ENABLE_Pos   = 1;            // \brief (SYSCTRL_OSC8M) Oscillator Enable */
  SYSCTRL_OSC8M_ENABLE       = ($01 shl SYSCTRL_OSC8M_ENABLE_Pos);

  SYSCTRL_OSC8M_RUNSTDBY_Pos = 6;            // \brief (SYSCTRL_OSC8M) Oscillator Run in Standby */
  SYSCTRL_OSC8M_RUNSTDBY     = ($01 shl SYSCTRL_OSC8M_RUNSTDBY_Pos);

  SYSCTRL_OSC8M_ONDEMAND_Pos = 7;            // \brief (SYSCTRL_OSC8M) Oscillator OnDemand */
  SYSCTRL_OSC8M_ONDEMAND     = ($01 shl SYSCTRL_OSC8M_ONDEMAND_Pos);


  SYSCTRL_XOSC32K_ENABLE_Pos   = 1;
  SYSCTRL_XOSC32K_ENABLE       = ($1 shl SYSCTRL_XOSC32K_ENABLE_Pos);
  SYSCTRL_XOSC32K_XTALEN_Pos   = 2;
  SYSCTRL_XOSC32K_XTALEN       = ($1 shl SYSCTRL_XOSC32K_XTALEN_Pos);
  SYSCTRL_XOSC32K_EN32K_Pos    = 3;
  SYSCTRL_XOSC32K_EN32K        = ($1 shl SYSCTRL_XOSC32K_EN32K_Pos);
  SYSCTRL_XOSC32K_AAMPEN_Pos   = 5;
  SYSCTRL_XOSC32K_AAMPEN       = ($1 shl SYSCTRL_XOSC32K_AAMPEN_Pos);
  SYSCTRL_XOSC32K_RUNSTDBY_Pos = 6;
  SYSCTRL_XOSC32K_RUNSTDBY     = ($1 shl SYSCTRL_XOSC32K_RUNSTDBY_Pos);
  SYSCTRL_XOSC32K_ONDEMAND_Pos = 7;
  SYSCTRL_XOSC32K_ONDEMAND     = ($1 shl SYSCTRL_XOSC32K_ONDEMAND_Pos);
  SYSCTRL_XOSC32K_STARTUP_Pos  = 8;
  SYSCTRL_XOSC32K_STARTUP_Msk  = ($7 shl SYSCTRL_XOSC32K_STARTUP_Pos);
  SYSCTRL_XOSC32K_WRTLOCK_Pos  = 12;
  SYSCTRL_XOSC32K_WRTLOCK      = ($1 shl SYSCTRL_XOSC32K_WRTLOCK_Pos);


  {$ifdef samc}
  OSCCTRL_OSC48MCTRL_ENABLE_Pos   = 1;
  OSCCTRL_OSC48MCTRL_ENABLE       = ($01 shl OSCCTRL_OSC48MCTRL_ENABLE_Pos);

  OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos = 6;
  OSCCTRL_OSC48MCTRL_RUNSTDBY     = ($01 shl OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos);

  OSCCTRL_OSC48MCTRL_ONDEMAND_Pos = 7;
  OSCCTRL_OSC48MCTRL_ONDEMAND     = ($01 shl OSCCTRL_OSC48MCTRL_ONDEMAND_Pos);

  OSCCTRL_OSC48MDIV_DIV_Pos       = 0;       // \brief (OSCCTRL_OSC48MDIV) OSC48M Division Factor */
  OSCCTRL_OSC48MDIV_DIV_Msk       = ($F shl OSCCTRL_OSC48MDIV_DIV_Pos);


  OSCCTRL_STATUS_XOSCRDY_Pos      = 0;            //brief (OSCCTRL_STATUS) XOSC Ready */
  OSCCTRL_STATUS_XOSCRDY          = ($1 shl OSCCTRL_STATUS_XOSCRDY_Pos);
  OSCCTRL_STATUS_XOSCFAIL_Pos     = 1;            //brief (OSCCTRL_STATUS) XOSC Clock Failure Detector */
  OSCCTRL_STATUS_XOSCFAIL         = ($1 shl OSCCTRL_STATUS_XOSCFAIL_Pos);
  OSCCTRL_STATUS_XOSCCKSW_Pos     = 2;            //brief (OSCCTRL_STATUS) XOSC Clock Switch */
  OSCCTRL_STATUS_XOSCCKSW         = ($1 shl OSCCTRL_STATUS_XOSCCKSW_Pos);
  OSCCTRL_STATUS_OSC48MRDY_Pos    = 4;            //brief (OSCCTRL_STATUS) OSC48M Ready */
  OSCCTRL_STATUS_OSC48MRDY        = ($1 shl OSCCTRL_STATUS_OSC48MRDY_Pos);
  OSCCTRL_STATUS_DPLLLCKR_Pos     = 8;            //brief (OSCCTRL_STATUS) DPLL Lock Rise */
  OSCCTRL_STATUS_DPLLLCKR         = ($1 shl OSCCTRL_STATUS_DPLLLCKR_Pos);
  OSCCTRL_STATUS_DPLLLCKF_Pos     = 9;            //brief (OSCCTRL_STATUS) DPLL Lock Fall */
  OSCCTRL_STATUS_DPLLLCKF         = ($1 shl OSCCTRL_STATUS_DPLLLCKF_Pos);
  OSCCTRL_STATUS_DPLLTO_Pos       = 10;           //brief (OSCCTRL_STATUS) DPLL Timeout */
  OSCCTRL_STATUS_DPLLTO           = ($1 shl OSCCTRL_STATUS_DPLLTO_Pos);
  OSCCTRL_STATUS_DPLLLDRTO_Pos    = 11;           //brief (OSCCTRL_STATUS) DPLL Ratio Ready */
  OSCCTRL_STATUS_DPLLLDRTO        = ($1 shl OSCCTRL_STATUS_DPLLLDRTO_Pos);


  OSC32KCTRL_XOSC32K_ENABLE_Pos   = 1;            //brief (OSC32KCTRL_XOSC32K) Oscillator Enable */
  OSC32KCTRL_XOSC32K_ENABLE       = ($1 shl OSC32KCTRL_XOSC32K_ENABLE_Pos);
  OSC32KCTRL_XOSC32K_XTALEN_Pos   = 2;            //brief (OSC32KCTRL_XOSC32K) Crystal Oscillator Enable */
  OSC32KCTRL_XOSC32K_XTALEN       = ($1 shl OSC32KCTRL_XOSC32K_XTALEN_Pos);
  OSC32KCTRL_XOSC32K_EN32K_Pos    = 3;            //brief (OSC32KCTRL_XOSC32K) 32kHz Output Enable */
  OSC32KCTRL_XOSC32K_EN32K        = ($1 shl OSC32KCTRL_XOSC32K_EN32K_Pos);
  OSC32KCTRL_XOSC32K_EN1K_Pos     = 4;            //brief (OSC32KCTRL_XOSC32K) 1kHz Output Enable */
  OSC32KCTRL_XOSC32K_EN1K         = ($1 shl OSC32KCTRL_XOSC32K_EN1K_Pos);
  OSC32KCTRL_XOSC32K_RUNSTDBY_Pos = 6;            //brief (OSC32KCTRL_XOSC32K) Run in Standby */
  OSC32KCTRL_XOSC32K_RUNSTDBY     = ($1 shl OSC32KCTRL_XOSC32K_RUNSTDBY_Pos);
  OSC32KCTRL_XOSC32K_ONDEMAND_Pos = 7;            //brief (OSC32KCTRL_XOSC32K) On Demand Control */
  OSC32KCTRL_XOSC32K_ONDEMAND     = ($1 shl OSC32KCTRL_XOSC32K_ONDEMAND_Pos);
  OSC32KCTRL_XOSC32K_STARTUP_Pos  = 8;            //brief (OSC32KCTRL_XOSC32K) Oscillator Start-Up Time */
  OSC32KCTRL_XOSC32K_STARTUP_Msk  = ($7 shl OSC32KCTRL_XOSC32K_STARTUP_Pos);
  //OSC32KCTRL_XOSC32K_STARTUP(value) (OSC32KCTRL_XOSC32K_STARTUP_Msk & ((value) shl OSC32KCTRL_XOSC32K_STARTUP_Pos))
  OSC32KCTRL_XOSC32K_WRTLOCK_Pos  = 12;           //brief (OSC32KCTRL_XOSC32K) Write Lock */
  OSC32KCTRL_XOSC32K_WRTLOCK      = ($1 shl OSC32KCTRL_XOSC32K_WRTLOCK_Pos);

  OSC32KCTRL_STATUS_XOSC32KRDY_Pos = 0;            //brief (OSC32KCTRL_STATUS) XOSC32K Ready */
  OSC32KCTRL_STATUS_XOSC32KRDY     = ($1 shl OSC32KCTRL_STATUS_XOSC32KRDY_Pos);
  OSC32KCTRL_STATUS_OSC32KRDY_Pos  = 1;            //brief (OSC32KCTRL_STATUS) OSC32K Ready */
  OSC32KCTRL_STATUS_OSC32KRDY      = ($1 shl OSC32KCTRL_STATUS_OSC32KRDY_Pos);
  OSC32KCTRL_STATUS_CLKFAIL_Pos    = 2;            //brief (OSC32KCTRL_STATUS) XOSC32K Clock Failure Detector */
  OSC32KCTRL_STATUS_CLKFAIL        = ($1 shl OSC32KCTRL_STATUS_CLKFAIL_Pos);
  OSC32KCTRL_STATUS_CLKSW_Pos      = 3;            //brief (OSC32KCTRL_STATUS) XOSC32K Clock switch */
  OSC32KCTRL_STATUS_CLKSW          = ($1 shl OSC32KCTRL_STATUS_CLKSW_Pos);


  OSCCTRL_DPLLRATIO_LDR_Pos        = 0;            // \brief (OSCCTRL_DPLLRATIO) Loop Divider Ratio */
  OSCCTRL_DPLLRATIO_LDR_Msk        = ($FFF shl OSCCTRL_DPLLRATIO_LDR_Pos);
  //OSCCTRL_DPLLRATIO_LDR(value) (OSCCTRL_DPLLRATIO_LDR_Msk & ((value) << OSCCTRL_DPLLRATIO_LDR_Pos))
  OSCCTRL_DPLLRATIO_LDRFRAC_Pos    = 16;           // \brief (OSCCTRL_DPLLRATIO) Loop Divider Ratio Fractional Part */
  OSCCTRL_DPLLRATIO_LDRFRAC_Msk    = ($F shl OSCCTRL_DPLLRATIO_LDRFRAC_Pos);
  //OSCCTRL_DPLLRATIO_LDRFRAC(value) (OSCCTRL_DPLLRATIO_LDRFRAC_Msk & ((value) << OSCCTRL_DPLLRATIO_LDRFRAC_Pos))


  OSCCTRL_DPLLCTRLB_FILTER_Pos    = 0;            //brief (OSCCTRL_DPLLCTRLB) Proportional Integral Filter Selection */
  OSCCTRL_DPLLCTRLB_FILTER_Msk    = ($3 shl OSCCTRL_DPLLCTRLB_FILTER_Pos);
  //OSCCTRL_DPLLCTRLB_FILTER(value) (OSCCTRL_DPLLCTRLB_FILTER_Msk & ((value) shl OSCCTRL_DPLLCTRLB_FILTER_Pos))
  OSCCTRL_DPLLCTRLB_LPEN_Pos      = 2;            //brief (OSCCTRL_DPLLCTRLB) Low-Power Enable */
  OSCCTRL_DPLLCTRLB_LPEN          = ($1 shl OSCCTRL_DPLLCTRLB_LPEN_Pos);
  OSCCTRL_DPLLCTRLB_WUF_Pos       = 3;            //brief (OSCCTRL_DPLLCTRLB) Wake Up Fast */
  OSCCTRL_DPLLCTRLB_WUF           = ($1 shl OSCCTRL_DPLLCTRLB_WUF_Pos);
  OSCCTRL_DPLLCTRLB_REFCLK_Pos    = 4;            //brief (OSCCTRL_DPLLCTRLB) Reference Clock Selection */
  OSCCTRL_DPLLCTRLB_REFCLK_Msk    = ($3 shl OSCCTRL_DPLLCTRLB_REFCLK_Pos);
  //OSCCTRL_DPLLCTRLB_REFCLK(value) (OSCCTRL_DPLLCTRLB_REFCLK_Msk & ((value) shl OSCCTRL_DPLLCTRLB_REFCLK_Pos))
  OSCCTRL_DPLLCTRLB_LTIME_Pos     = 8;            //brief (OSCCTRL_DPLLCTRLB) Lock Time */
  OSCCTRL_DPLLCTRLB_LTIME_Msk     = ($7 shl OSCCTRL_DPLLCTRLB_LTIME_Pos);
  //OSCCTRL_DPLLCTRLB_LTIME(value) (OSCCTRL_DPLLCTRLB_LTIME_Msk & ((value) shl OSCCTRL_DPLLCTRLB_LTIME_Pos))
  OSCCTRL_DPLLCTRLB_LBYPASS_Pos   = 12;           //brief (OSCCTRL_DPLLCTRLB) Lock Bypass */
  OSCCTRL_DPLLCTRLB_LBYPASS       = ($1 shl OSCCTRL_DPLLCTRLB_LBYPASS_Pos);
  OSCCTRL_DPLLCTRLB_DIV_Pos       = 16;           //brief (OSCCTRL_DPLLCTRLB) Clock Divider */
  OSCCTRL_DPLLCTRLB_DIV_Msk       = ($7FF shl OSCCTRL_DPLLCTRLB_DIV_Pos);
  //OSCCTRL_DPLLCTRLB_DIV(value) (OSCCTRL_DPLLCTRLB_DIV_Msk & ((value) shl OSCCTRL_DPLLCTRLB_DIV_Pos))



  {$endif}



  SYSCTRL_PCLKSR_OFFSET      = $0C;          // (SYSCTRL_PCLKSR offset) Power and Clocks Status */
  SYSCTRL_PCLKSR_RESETVALUE  = $00000000;    // (SYSCTRL_PCLKSR reset_value) Power and Clocks Status */

  SYSCTRL_PCLKSR_XOSCRDY_Pos    = 0;            // (SYSCTRL_PCLKSR) XOSC Ready */
  SYSCTRL_PCLKSR_XOSCRDY        = ($1 shl SYSCTRL_PCLKSR_XOSCRDY_Pos);
  SYSCTRL_PCLKSR_XOSC32KRDY_Pos = 1;            // (SYSCTRL_PCLKSR) XOSC32K Ready */
  SYSCTRL_PCLKSR_XOSC32KRDY     = ($1 shl SYSCTRL_PCLKSR_XOSC32KRDY_Pos);
  SYSCTRL_PCLKSR_OSC32KRDY_Pos  = 2;            // (SYSCTRL_PCLKSR) OSC32K Ready */
  SYSCTRL_PCLKSR_OSC32KRDY      = ($1 shl SYSCTRL_PCLKSR_OSC32KRDY_Pos);
  SYSCTRL_PCLKSR_OSC8MRDY_Pos   = 3;            // (SYSCTRL_PCLKSR) OSC8M Ready */
  SYSCTRL_PCLKSR_OSC8MRDY       = ($1 shl SYSCTRL_PCLKSR_OSC8MRDY_Pos);
  SYSCTRL_PCLKSR_DFLLRDY_Pos    = 4;            // (SYSCTRL_PCLKSR) DFLL Ready */
  SYSCTRL_PCLKSR_DFLLRDY        = ($1 shl SYSCTRL_PCLKSR_DFLLRDY_Pos);
  SYSCTRL_PCLKSR_DFLLOOB_Pos    = 5;            // (SYSCTRL_PCLKSR) DFLL Out Of Bounds */
  SYSCTRL_PCLKSR_DFLLOOB        = ($1 shl SYSCTRL_PCLKSR_DFLLOOB_Pos);
  SYSCTRL_PCLKSR_DFLLLCKF_Pos   = 6;            // (SYSCTRL_PCLKSR) DFLL Lock Fine */
  SYSCTRL_PCLKSR_DFLLLCKF       = ($1 shl SYSCTRL_PCLKSR_DFLLLCKF_Pos);
  SYSCTRL_PCLKSR_DFLLLCKC_Pos   = 7;            // (SYSCTRL_PCLKSR) DFLL Lock Coarse */
  SYSCTRL_PCLKSR_DFLLLCKC       = ($1 shl SYSCTRL_PCLKSR_DFLLLCKC_Pos);
  SYSCTRL_PCLKSR_DFLLRCS_Pos    = 8;            // (SYSCTRL_PCLKSR) DFLL Reference Clock Stopped */
  SYSCTRL_PCLKSR_DFLLRCS        = ($1 shl SYSCTRL_PCLKSR_DFLLRCS_Pos);
  SYSCTRL_PCLKSR_BOD33RDY_Pos   = 9;            // (SYSCTRL_PCLKSR) BOD33 Ready */
  SYSCTRL_PCLKSR_BOD33RDY       = ($1 shl SYSCTRL_PCLKSR_BOD33RDY_Pos);
  SYSCTRL_PCLKSR_BOD33DET_Pos   = 10;           // (SYSCTRL_PCLKSR) BOD33 Detection */
  SYSCTRL_PCLKSR_BOD33DET       = ($1 shl SYSCTRL_PCLKSR_BOD33DET_Pos);
  SYSCTRL_PCLKSR_B33SRDY_Pos    = 11;           // (SYSCTRL_PCLKSR) BOD33 Synchronization Ready */
  SYSCTRL_PCLKSR_B33SRDY        = ($1 shl SYSCTRL_PCLKSR_B33SRDY_Pos);
  SYSCTRL_PCLKSR_DPLLLCKR_Pos   = 15;           // (SYSCTRL_PCLKSR) DPLL Lock Rise */
  SYSCTRL_PCLKSR_DPLLLCKR       = ($1 shl SYSCTRL_PCLKSR_DPLLLCKR_Pos);
  SYSCTRL_PCLKSR_DPLLLCKF_Pos   = 16;           // (SYSCTRL_PCLKSR) DPLL Lock Fall */
  SYSCTRL_PCLKSR_DPLLLCKF       = ($1 shl SYSCTRL_PCLKSR_DPLLLCKF_Pos);
  SYSCTRL_PCLKSR_DPLLLTO_Pos    = 17;           // (SYSCTRL_PCLKSR) DPLL Lock Timeout */
  SYSCTRL_PCLKSR_DPLLLTO        = ($1 shl SYSCTRL_PCLKSR_DPLLLTO_Pos);
  SYSCTRL_PCLKSR_MASK           = $00038FFF; // (SYSCTRL_PCLKSR) MASK Register */

   SYSCTRL_DFLLMUL_OFFSET       = $2C;         // (SYSCTRL_DFLLMUL offset) DFLL48M Multiplier */
   SYSCTRL_DFLLMUL_RESETVALUE   = $00000000; // (SYSCTRL_DFLLMUL reset_value) DFLL48M Multiplier */

   SYSCTRL_DFLLMUL_MUL_Pos      = 0;            // (SYSCTRL_DFLLMUL) DFLL Multiply Factor */
   SYSCTRL_DFLLMUL_MUL_Msk      = ($FFFF shl SYSCTRL_DFLLMUL_MUL_Pos);
   SYSCTRL_DFLLMUL_FSTEP_Pos    = 16;           // (SYSCTRL_DFLLMUL) Fine Maximum Step */
   SYSCTRL_DFLLMUL_FSTEP_Msk    = ($3FF shl SYSCTRL_DFLLMUL_FSTEP_Pos);
   SYSCTRL_DFLLMUL_CSTEP_Pos    = 26;           // (SYSCTRL_DFLLMUL) Coarse Maximum Step */
   SYSCTRL_DFLLMUL_CSTEP_Msk    = ($3F shl SYSCTRL_DFLLMUL_CSTEP_Pos);
   SYSCTRL_DFLLMUL_MASK         = $FFFFFFFF; // (SYSCTRL_DFLLMUL) MASK Register */

    SYSCTRL_DFLLCTRL_OFFSET     = $24;         // (SYSCTRL_DFLLCTRL offset) DFLL48M Control */
    SYSCTRL_DFLLCTRL_RESETVALUE = $0080;      // (SYSCTRL_DFLLCTRL reset_value) DFLL48M Control */

    SYSCTRL_DFLLCTRL_ENABLE_Pos = 1;            // (SYSCTRL_DFLLCTRL) DFLL Enable */
    SYSCTRL_DFLLCTRL_ENABLE     = ($1 shl SYSCTRL_DFLLCTRL_ENABLE_Pos);
    SYSCTRL_DFLLCTRL_MODE_Pos   = 2;            // (SYSCTRL_DFLLCTRL) Operating Mode Selection */
    SYSCTRL_DFLLCTRL_MODE       = ($1 shl SYSCTRL_DFLLCTRL_MODE_Pos);
    SYSCTRL_DFLLCTRL_STABLE_Pos = 3;            // (SYSCTRL_DFLLCTRL) Stable DFLL Frequency */
    SYSCTRL_DFLLCTRL_STABLE     = ($1 shl SYSCTRL_DFLLCTRL_STABLE_Pos);
    SYSCTRL_DFLLCTRL_LLAW_Pos   = 4;            // (SYSCTRL_DFLLCTRL) Lose Lock After Wake */
    SYSCTRL_DFLLCTRL_LLAW       = ($1 shl SYSCTRL_DFLLCTRL_LLAW_Pos);
    SYSCTRL_DFLLCTRL_USBCRM_Pos = 5;            // (SYSCTRL_DFLLCTRL) USB Clock Recovery Mode */
    SYSCTRL_DFLLCTRL_USBCRM     = ($1 shl SYSCTRL_DFLLCTRL_USBCRM_Pos);
    SYSCTRL_DFLLCTRL_RUNSTDBY_Pos = 6;            // (SYSCTRL_DFLLCTRL) Run in Standby */
    SYSCTRL_DFLLCTRL_RUNSTDBY   = ($1 shl SYSCTRL_DFLLCTRL_RUNSTDBY_Pos);
    SYSCTRL_DFLLCTRL_ONDEMAND_Pos = 7;            // (SYSCTRL_DFLLCTRL) On Demand Control */
    SYSCTRL_DFLLCTRL_ONDEMAND   = ($1 shl SYSCTRL_DFLLCTRL_ONDEMAND_Pos);
    SYSCTRL_DFLLCTRL_CCDIS_Pos  = 8;            // (SYSCTRL_DFLLCTRL) Chill Cycle Disable */
    SYSCTRL_DFLLCTRL_CCDIS      = ($1 shl SYSCTRL_DFLLCTRL_CCDIS_Pos);
    SYSCTRL_DFLLCTRL_QLDIS_Pos  = 9;            // (SYSCTRL_DFLLCTRL) Quick Lock Disable */
    SYSCTRL_DFLLCTRL_QLDIS      = ($1 shl SYSCTRL_DFLLCTRL_QLDIS_Pos);
    SYSCTRL_DFLLCTRL_BPLCKC_Pos = 10;           // (SYSCTRL_DFLLCTRL) Bypass Coarse Lock */
    SYSCTRL_DFLLCTRL_BPLCKC     = ($1 shl SYSCTRL_DFLLCTRL_BPLCKC_Pos);
    SYSCTRL_DFLLCTRL_WAITLOCK_Pos = 11;           // (SYSCTRL_DFLLCTRL) Wait Lock */
    SYSCTRL_DFLLCTRL_WAITLOCK   = ($1 shl SYSCTRL_DFLLCTRL_WAITLOCK_Pos);
    SYSCTRL_DFLLCTRL_MASK       = $0FFE;     // (SYSCTRL_DFLLCTRL) MASK Register */


     SYSCTRL_INTFLAG_OFFSET       = $08;         // (SYSCTRL_INTFLAG offset) Interrupt Flag Status and Clear */
     SYSCTRL_INTFLAG_RESETVALUE   = $00000000;   // (SYSCTRL_INTFLAG reset_value) Interrupt Flag Status and Clear */

     SYSCTRL_INTFLAG_XOSCRDY_Pos  = 0;            // (SYSCTRL_INTFLAG) XOSC Ready */
     SYSCTRL_INTFLAG_XOSCRDY      = ($1 shl SYSCTRL_INTFLAG_XOSCRDY_Pos);
     SYSCTRL_INTFLAG_XOSC32KRDY_Pos = 1;            // (SYSCTRL_INTFLAG) XOSC32K Ready */
     SYSCTRL_INTFLAG_XOSC32KRDY   = ($1 shl SYSCTRL_INTFLAG_XOSC32KRDY_Pos);
     SYSCTRL_INTFLAG_OSC32KRDY_Pos = 2;            // (SYSCTRL_INTFLAG) OSC32K Ready */
     SYSCTRL_INTFLAG_OSC32KRDY    = ($1 shl SYSCTRL_INTFLAG_OSC32KRDY_Pos);
     SYSCTRL_INTFLAG_OSC8MRDY_Pos = 3;            // (SYSCTRL_INTFLAG) OSC8M Ready */
     SYSCTRL_INTFLAG_OSC8MRDY     = ($1 shl SYSCTRL_INTFLAG_OSC8MRDY_Pos);
     SYSCTRL_INTFLAG_DFLLRDY_Pos  = 4;            // (SYSCTRL_INTFLAG) DFLL Ready */
     SYSCTRL_INTFLAG_DFLLRDY      = ($1 shl SYSCTRL_INTFLAG_DFLLRDY_Pos);
     SYSCTRL_INTFLAG_DFLLOOB_Pos  = 5;            // (SYSCTRL_INTFLAG) DFLL Out Of Bounds */
     SYSCTRL_INTFLAG_DFLLOOB      = ($1 shl SYSCTRL_INTFLAG_DFLLOOB_Pos);
     SYSCTRL_INTFLAG_DFLLLCKF_Pos = 6;            // (SYSCTRL_INTFLAG) DFLL Lock Fine */
     SYSCTRL_INTFLAG_DFLLLCKF     = ($1 shl SYSCTRL_INTFLAG_DFLLLCKF_Pos);
     SYSCTRL_INTFLAG_DFLLLCKC_Pos = 7;            // (SYSCTRL_INTFLAG) DFLL Lock Coarse */
     SYSCTRL_INTFLAG_DFLLLCKC     = ($1 shl SYSCTRL_INTFLAG_DFLLLCKC_Pos);
     SYSCTRL_INTFLAG_DFLLRCS_Pos  = 8;            // (SYSCTRL_INTFLAG) DFLL Reference Clock Stopped */
     SYSCTRL_INTFLAG_DFLLRCS      = ($1 shl SYSCTRL_INTFLAG_DFLLRCS_Pos);
     SYSCTRL_INTFLAG_BOD33RDY_Pos = 9;            // (SYSCTRL_INTFLAG) BOD33 Ready */
     SYSCTRL_INTFLAG_BOD33RDY     = ($1 shl SYSCTRL_INTFLAG_BOD33RDY_Pos);
     SYSCTRL_INTFLAG_BOD33DET_Pos = 10;           // (SYSCTRL_INTFLAG) BOD33 Detection */
     SYSCTRL_INTFLAG_BOD33DET     = ($1 shl SYSCTRL_INTFLAG_BOD33DET_Pos);
     SYSCTRL_INTFLAG_B33SRDY_Pos  = 11;           // (SYSCTRL_INTFLAG) BOD33 Synchronization Ready */
     SYSCTRL_INTFLAG_B33SRDY      = ($1 shl SYSCTRL_INTFLAG_B33SRDY_Pos);
     SYSCTRL_INTFLAG_DPLLLCKR_Pos = 15;           // (SYSCTRL_INTFLAG) DPLL Lock Rise */
     SYSCTRL_INTFLAG_DPLLLCKR     = ($1 shl SYSCTRL_INTFLAG_DPLLLCKR_Pos);
     SYSCTRL_INTFLAG_DPLLLCKF_Pos = 16;           // (SYSCTRL_INTFLAG) DPLL Lock Fall */
     SYSCTRL_INTFLAG_DPLLLCKF     = ($1 shl SYSCTRL_INTFLAG_DPLLLCKF_Pos);
     SYSCTRL_INTFLAG_DPLLLTO_Pos  = 17;           // (SYSCTRL_INTFLAG) DPLL Lock Timeout */
     SYSCTRL_INTFLAG_DPLLLTO      = ($1 shl SYSCTRL_INTFLAG_DPLLLTO_Pos);
     SYSCTRL_INTFLAG_MASK         = $00038FFF; // (SYSCTRL_INTFLAG) MASK Register */

     SYSCTRL_DFLLVAL_OFFSET       = $28;         //(SYSCTRL_DFLLVAL offset) DFLL48M Value */
     SYSCTRL_DFLLVAL_RESETVALUE   = $00000000; //(SYSCTRL_DFLLVAL reset_value) DFLL48M Value */

     SYSCTRL_DFLLVAL_FINE_Pos     = 0;            //(SYSCTRL_DFLLVAL) Fine Value */
     SYSCTRL_DFLLVAL_FINE_Msk     = ($3FF shl SYSCTRL_DFLLVAL_FINE_Pos);
     SYSCTRL_DFLLVAL_COARSE_Pos   = 10;           //(SYSCTRL_DFLLVAL) Coarse Value */
     SYSCTRL_DFLLVAL_COARSE_Msk   = ($3F shl SYSCTRL_DFLLVAL_COARSE_Pos);
     SYSCTRL_DFLLVAL_DIFF_Pos     = 16;           //(SYSCTRL_DFLLVAL) Multiplication Ratio Difference */
     SYSCTRL_DFLLVAL_DIFF_Msk     = ($FFFF shl SYSCTRL_DFLLVAL_DIFF_Pos);
     SYSCTRL_DFLLVAL_MASK         = $FFFFFFFF; //(SYSCTRL_DFLLVAL) MASK Register */


     // SysTick Control / Status Register Definitions */
     SysTick_CTRL_COUNTFLAG_Pos        = 16;
     SysTick_CTRL_COUNTFLAG_Msk        = (1 shl SysTick_CTRL_COUNTFLAG_Pos);
     SysTick_CTRL_CLKSOURCE_Pos        =  2;
     SysTick_CTRL_CLKSOURCE_Msk        = (1 shl SysTick_CTRL_CLKSOURCE_Pos);
     SysTick_CTRL_TICKINT_Pos          =  1;
     SysTick_CTRL_TICKINT_Msk          = (1 shl SysTick_CTRL_TICKINT_Pos);
     SysTick_CTRL_ENABLE_Pos           =  0;
     SysTick_CTRL_ENABLE_Msk           = (1 shl SysTick_CTRL_ENABLE_Pos);

